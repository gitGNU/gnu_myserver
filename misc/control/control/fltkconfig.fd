# data file for the Fltk User Interface Designer (fluid)
version 1.0108 
i18n_type 1 
i18n_include "language.h" 
i18n_function ctrl_gettext 
header_name {.h} 
code_name {.cpp}
class MainDlg {open
} {
  Function {make_window()} {open
  } {
    Fl_Window ConfDlg {
      label {MyServer Configure}
      callback {if(Changed) {
  if(fl_choice(LanguageXMLLast_Change, LanguageXMLNo, LanguageXMLYes, NULL)) {
    ConfDlg->hide();
  }
}
else {
  ConfDlg->hide();
}} open
      xywh {583 249 550 360} type Double visible
    } {
      Fl_Menu_Bar {} {
        xywh {0 0 550 25}
      } {
        Submenu {} {
          label {&File} open
          xywh {0 0 100 20}
        } {
          MenuItem {} {
            label {&Open...}
            callback {int ret;
if(Changed) {
  if(fl_choice(LanguageXMLLast_Change, LanguageXMLNo, LanguageXMLYes, NULL)) {
    ret = ask_type();
    if(ret == -1) {
      ret = 0;
    }
    else {
      ConfType = ret;
      ret = load_config();
    }
  }
}
else {
  ret = ask_type();
  if(ret == -1) {
    ret = 0;
  }
  else {
    ConfType = ret;
    ret = load_config();
  }
}

if(ret) {
  fl_alert(LanguageXMLNot_Found);
}}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {&Save...}
            callback {int i = ask_type();
if(i != -1) {
  ConfType = i;
  i = save_config();
  if(i) {
    fl_alert(LanguageXMLNot_Save);
  }
}}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {&Revert}
            callback {if(fl_choice(LanguageXMLReload_Prev, LanguageXMLNo, LanguageXMLYes, NULL)) {
  load_config();
}}
            xywh {0 0 100 20}
          }
          Submenu {} {
            label Run open
            xywh {0 0 100 20}
          } {
            MenuItem {} {
              label {as Console}
              callback {RunAsConsole();}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label {as Service}
              callback {RunAsService();}
              xywh {0 0 100 20}
            }
          }
          Submenu {} {
            label Stop open
            xywh {0 0 100 20}
          } {
            MenuItem {} {
              label Console
              callback {StopConsole();}
              xywh {0 0 100 20}
            }
            MenuItem {} {
              label Service
              callback {StopService();}
              xywh {0 0 100 20}
            }
          }
          MenuItem {} {
            label {&Quit}
            callback {if(Changed) {
  if(fl_choice(LanguageXMLLast_Change, LanguageXMLNo, LanguageXMLYes, NULL)) {
    ConfDlg->hide();
  }
}
else {
  ConfDlg->hide();
}}
            xywh {0 0 100 20}
          }
        }
        Submenu {} {
          label {Ser&vice} open
          xywh {0 0 100 20}
        } {
          MenuItem {} {
            label {Install Service}
            callback {InstallService();}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {Remove Service}
            callback {RemoveService();}
            xywh {0 0 100 20}
          }
        }
        Submenu {} {
          label {Re&mote} open
          xywh {0 0 100 20}
        } {
          MenuItem {} {
            label {Login...}
            callback {ServerLogin(true);}
            xywh {0 0 100 20}
          }
          MenuItem MenuLogout {
            label Logout
            callback {ServerLogout();}
            xywh {0 0 100 20} deactivate
          }
          MenuItem MenuGetConfig {
            label {Get Config}
            callback {int ret;
if(Changed) {
  if(fl_choice(LanguageXMLLast_Change, LanguageXMLNo, LanguageXMLYes, NULL)) {

    ret = load_config_remote();

    if(ret) {
      ret = ServerLogin(false);
      if(!ret) {
        ret = load_config_remote();
      }
    }

    if(ret == -1) {
      fl_alertcat(LanguageXMLDownload_Failed, Server.LastCode);
      ServerLogout();
    }
    else if(ret) {
      fl_alert(LanguageXMLNot_Found);
    }
  }
}
else {

  ret = load_config_remote();

  if(ret) {
    ret = ServerLogin(false);
    if(!ret) {
      ret = load_config_remote();   
    }
  }

  if(ret == -1) {
    fl_alertcat(LanguageXMLDownload_Failed, Server.LastCode);
    ServerLogout();
  }
  else if(ret) {
    fl_alert(LanguageXMLNot_Found);
  }
}}
            xywh {0 0 100 20} deactivate
          }
          MenuItem MenuSendConfig {
            label {Send Config}
            callback {int ret;
ret = fl_choice(LanguageXMLKill_All, LanguageXMLNo, LanguageXMLYes, NULL);
if(ret) {

  ret = save_config_remote();

  if(ret) {
    ret = ServerLogin(false);
    if(!ret) {
      ret = save_config_remote();
    }
  }

  if(ret == -1) {
    fl_alertcat(LanguageXMLUpload_Failed, Server.LastCode);
  }
  else if(ret) {
    fl_alert(LanguageXMLNot_Save);
  }
}
ServerLogout();}
            xywh {0 0 100 20} deactivate
          }
          MenuItem MenuConnections {
            label {Connections...}
            callback {ServerConnections();}
            xywh {0 0 100 20} deactivate
          }
          MenuItem MenuReboot {
            label {Reboot...}
            callback {int ret;
ret = fl_choice(LanguageXMLKill_All, LanguageXMLNo, LanguageXMLYes, NULL);
if(ret) {
  ret = Server.sendReboot();
  
  if(ret) {
    ret = ServerLogin(false);
    if(!ret) {
      ret = Server.sendReboot();
    }
  }

  if(ret) {
    fl_alert(LanguageXMLReboot_Failed);
  }

  ServerLogout();
}}
            xywh {0 0 100 20} deactivate
          }
        }
        Submenu {} {
          label {&Help} open
          xywh {0 0 100 20}
        } {
          MenuItem {} {
            label {&About}
            callback {AboutDlg->show();}
            xywh {0 0 100 20}
          }
        }
      }
      Fl_Tabs {} {open
        xywh {0 25 635 335}
      } {
        Fl_Group {} {
          label System selected
          xywh {0 50 550 310}
        } {
          Fl_Value_Input Buffer_Size {
            label {Memory buffer (in bytes):}
            callback {Changed = true;}
            xywh {295 60 115 25} maximum 5.24288e+06 step 1
          }
          Fl_Choice Verbosity {
            label {Verbosity level:}
            callback {Changed = true;}
            xywh {295 90 115 25} down_box BORDER_BOX when 1
          } {
            MenuItem {} {
              label None
              xywh {5 5 100 20}
            }
            MenuItem {} {
              label Normal
              xywh {5 5 100 20}
            }
            MenuItem {} {
              label Higher
              xywh {5 5 100 20}
            }
            MenuItem {} {
              label Highest
              xywh {5 5 100 20}
            }
          }
          Fl_Value_Input Max_Log_File_Size {
            label {Max log file size (in bytes):}
            callback {Changed = true;}
            xywh {295 120 115 25} maximum 5.24288e+07 step 1
          }
          Fl_Value_Input Nthreads_Static {
            label {Always active threads:}
            callback {Changed = true;}
            xywh {295 150 115 30} maximum 1000 step 1
          }
          Fl_Value_Input Nthreads_Max {
            label {Maximum number of threads:}
            callback {Changed = true;}
            xywh {295 185 115 25} maximum 1000 step 1
          }
          Fl_Choice Language {
            label {Language:}
            callback {Changed = true;} open
            xywh {295 215 115 25} down_box BORDER_BOX when 1
          } {}
        }
        Fl_Group {} {
          label Server
          xywh {0 50 550 310} hide
        } {
          Fl_Value_Input Connection_Timeout {
            label {Connection time-out (in sec):}
            callback {Changed = true;}
            xywh {295 60 115 25} maximum 3600 step 1
          }
          Fl_Value_Input Max_Connections {
            label {Max connections:}
            callback {Changed = true;}
            xywh {295 90 115 25} maximum 5.24288e+06 step 1
          }
          Fl_Value_Input Gzip_Threshold {
            label {Gzip compression threshold (in bytes):}
            callback {Changed = true;}
            xywh {295 120 115 25} maximum 5.24288e+06 step 1
          }
          Fl_Input Browsefolder_Css {
            label {Stylesheet:}
            callback {Changed = true;}
            xywh {295 150 115 25} when 1
          }
          Fl_Button {} {
            label {Browse...}
            callback {char * chrptr = fl_file_chooser("", "", "");
if(chrptr != 0) {
  Changed = true;
  Browsefolder_Css->value(chrptr);
}}
            xywh {420 150 85 25}
          }
          Fl_Check_Button Use_Errors_Files {
            label {Personalized error pages:}
            callback {Changed = true;}
            xywh {295 180 25 25} down_box DOWN_BOX align 4 when 1
          }
          Fl_Group {} {
            label {Default file names:} open
            tooltip {Default file to send in a directory when none is specified} xywh {115 205 345 145} box ENGRAVED_BOX align 17
          } {
            Fl_Browser Default_Filename {
              xywh {135 230 195 105} type Hold
            }
            Fl_Button {} {
              label {Add...}
              callback {char * val;
val = (char *)fl_input(LanguageXMLEnter_Default);
if(val != 0) {
  Changed = true;
  Default_Filename->add(val);
}}
              xywh {350 230 85 25}
            }
            Fl_Button {} {
              label Remove
              callback {if(Default_Filename->value() != 0) {
  Changed = true;
  Default_Filename->remove(Default_Filename->value());
}}
              xywh {350 265 85 25}
            }
          }
        }
        Fl_Group {} {
          label MIME
          xywh {0 50 550 310} hide
        } {
          Fl_Group {} {open
            xywh {10 60 530 290} box ENGRAVED_FRAME
          } {
            Fl_Group {} {
              label {Extension:} open
              xywh {20 70 195 270} box ENGRAVED_FRAME align 17
            } {
              Fl_Browser Ext {
                callback {int val = Ext->value();
if(val != 0) {
  val -= 1;
  
  Cmd->value(MimeConf.getCmd(val));
  
  if(Cmd->value() >= 2 && Cmd->value() <= 4) {
  }

  Mime->value(MimeConf.getType(val));

  Manager->value(MimeConf.getManager(val));
}}
                xywh {31 95 170 190} type Hold
              }
              Fl_Button {} {
                label {Add...}
                callback {char * val;
int i;
val = (char *)fl_input(LanguageXMLEnter_Extension);
if(val != 0) {
  Changed = true;
  i = MimeConf.addExt(val);
  MimeConf.populateExt(Ext);
  Ext->value(i + 1);

  Cmd->value(MimeConf.getCmd(i));
  
  
  Mime->value(MimeConf.getType(i));

  Manager->value(MimeConf.getManager(i));
}}
                xywh {30 300 80 25}
              }
              Fl_Button {} {
                label Remove
                callback {int val;
val = Ext->value();
if(val != 0) {
  Changed = true;
  val--;
  MimeConf.removeExt(val);
  MimeConf.populateExt(Ext);
}}
                xywh {120 300 80 25}
              }
            }
            Fl_Choice Mime {
              label {MIME Type:}
              callback {int val = Ext->value();
if(val != 0) {
  val--;
  Changed = true;
  MimeConf.setType(val, Mime->value());
}} open
              xywh {310 95 220 25} down_box BORDER_BOX when 1
            } {}
            Fl_Button {} {
              label {Add...}
              callback {char * val;
int i, ret;
val = (char *)fl_input(LanguageXMLEnter_MIME);
if(val != 0) {
  Changed = true;
  i = MimeConf.addMime(val);
  MimeConf.populateMime(Mime);
  Mime->value(i);
  ret = Ext->value();
  if(ret != 0) {
    ret--;
    MimeConf.setType(ret, i);
  }
}}
              xywh {310 125 90 25}
            }
            Fl_Choice Cmd {
              label {Action:}
              callback {int val = Cmd->value();
int val2 = Ext->value();
if(val >= 2 && val <= 4) {
}
else {
  if(val2 != 0)
    MimeConf.setManager(val2 - 1, NONE);
  Manager->value(NONE);
}

if(val2 != 0) {
  val2--;
  MimeConf.setCmd(val2, val);
  Changed = true;
}} open
              xywh {310 165 220 25} down_box BORDER_BOX when 1
            } {
              MenuItem {} {
                label {Send the file}
                xywh {10 10 100 20}
              }
              MenuItem {} {
                label {URL link}
                xywh {10 10 100 20}
              }
              MenuItem {} {
                label {Run as CGI}
                xywh {10 10 100 20}
              }
              MenuItem {} {
                label {Run as FastCGI}
                xywh {10 10 100 20}
              }
              MenuItem {} {
                label {Run as SCGI}
                xywh {10 10 100 20}
              }
              MenuItem {} {
                label {Run as ISAPI}
                xywh {10 10 100 20}
              }
              MenuItem {} {
                label {Run as MSCGI}
                xywh {10 10 100 20}
              }
              MenuItem {} {
                label {Run as WINCGI}
                xywh {10 10 100 20}
              }
              MenuItem {} {
                label Execute
                xywh {10 10 100 20}
              }
              MenuItem {} {
                label {Execute as an ISAPI module}
                xywh {10 10 100 20}
              }
              MenuItem {} {
                label {Execute self contained FastCGI}
                xywh {10 10 100 20}
              }
              MenuItem {} {
                label {Run self contained SCGI}
                xywh {10 10 100 20}
              }
            }
            Fl_Input Manager {
              label {Manager:}
              callback {int val = Ext->value();
if(val != 0) {
  val--;
  MimeConf.setManager(val, Manager->value());
  Changed = true;
}}
              xywh {310 205 220 25}
            }
            Fl_Button ManagerButton {
              label {Browse...}
              callback {int val = Ext->value();
char * chrptr = fl_file_chooser("", "", "");
if(chrptr != 0) {
  if(val != 0) {
    val--;
    MimeConf.setManager(val, chrptr);
    Manager->value(chrptr);
    Changed = true;
  }
}}
              xywh {310 235 90 25}
            }
          }
        }
        Fl_Group {} {
          label Hosts
          xywh {0 50 635 310} hide
        } {
          Fl_Group {} {
            xywh {10 60 530 45} box ENGRAVED_FRAME
          } {
            Fl_Choice Name {
              label {Name:}
              callback {int i = Name->value();
VHostConf.populateHost(i, Host);
VHostConf.populateIp(i, Ip);
Port->value(VHostConf.getPort(i));
Protocol->value(VHostConf.getProtocol(i));
Ssl_Privatekey->value(VHostConf.getSsl_Privatekey(i));
Ssl_Certificate->value(VHostConf.getSsl_Certificate(i));
Ssl_Password->value(VHostConf.getSsl_Password(i));
Docroot->value(VHostConf.getDocroot(i));
Sysfolder->value(VHostConf.getSysfolder(i));
Accesseslog->value(VHostConf.getAccesseslog(i));
Warninglog->value(VHostConf.getWarninglog(i));
Allow_CGI->value(VHostConf.getService(i, ALLOW_CGI));
Allow_ISAPI->value(VHostConf.getService(i, ALLOW_ISAPI));
Allow_MSCGI->value(VHostConf.getService(i, ALLOW_MSCGI));
Allow_WINCGI->value(VHostConf.getService(i, ALLOW_WINCGI));
Allow_FASTCGI->value(VHostConf.getService(i, ALLOW_FASTCGI));
Allow_SCGI->value(VHostConf.getService(i, ALLOW_SCGI));
Allow_SEND_LINK->value(VHostConf.getService(i, ALLOW_SEND_LINK));
Allow_EXTERNAL_COMMANDS->value(VHostConf.getService(i, ALLOW_EXTERNAL_COMMANDS));
Allow_SEND_FILE->value(VHostConf.getService(i, ALLOW_SEND_FILE));
i = Protocol->value();
if(i != 1 && i != 3) {
  Ssl_Privatekey->deactivate();
  Ssl_Certificate->deactivate();
  Ssl_Password->deactivate();
  SslButton1->deactivate();
  SslButton2->deactivate();
}
else {
  Ssl_Privatekey->activate();
  Ssl_Certificate->activate();
  Ssl_Password->activate();
  SslButton1->activate();
  SslButton2->activate();
}} open
              xywh {75 70 275 25} down_box BORDER_BOX when 1
            } {}
            Fl_Button {} {
              label {Add...}
              callback {char * val;
int i;
val = (char *)fl_input(LanguageXMLEnter_Name);
if(val != 0) {
  Changed = true;
  i = VHostConf.addName(val);
  VHostConf.populateName(Name);
  Name->value(i);
  VHostConf.populateHost(i, Host);
  VHostConf.populateIp(i, Ip);
  Port->value(VHostConf.getPort(i));
  Protocol->value(VHostConf.getProtocol(i));
  Ssl_Privatekey->value(VHostConf.getSsl_Privatekey(i));
  Ssl_Certificate->value(VHostConf.getSsl_Certificate(i));
  Ssl_Password->value(VHostConf.getSsl_Password(i));
  Docroot->value(VHostConf.getDocroot(i));
  Sysfolder->value(VHostConf.getSysfolder(i));
  Accesseslog->value(VHostConf.getAccesseslog(i));
  Warninglog->value(VHostConf.getWarninglog(i));
  Allow_CGI->value(VHostConf.getService(i, ALLOW_CGI));
  Allow_ISAPI->value(VHostConf.getService(i, ALLOW_ISAPI));
  Allow_MSCGI->value(VHostConf.getService(i, ALLOW_MSCGI));
  Allow_WINCGI->value(VHostConf.getService(i, ALLOW_WINCGI));
  Allow_FASTCGI->value(VHostConf.getService(i, ALLOW_FASTCGI));
  Allow_SCGI->value(VHostConf.getService(i, ALLOW_SCGI));
  Allow_SEND_LINK->value(VHostConf.getService(i, ALLOW_SEND_LINK));
  Allow_EXTERNAL_COMMANDS->value(VHostConf.getService(i, ALLOW_EXTERNAL_COMMANDS));
  Allow_SEND_FILE->value(VHostConf.getService(i, ALLOW_SEND_FILE));
  i = Protocol->value();
  if(i != 1 && i != 3) {
    Ssl_Privatekey->deactivate();
    Ssl_Certificate->deactivate();
    Ssl_Password->deactivate();
    SslButton1->deactivate();
    SslButton2->deactivate();
  }
  else {
    Ssl_Privatekey->activate();
    Ssl_Certificate->activate();
    Ssl_Password->activate();
    SslButton1->activate();
    SslButton2->activate();
  }
}}
              xywh {360 70 80 25}
            }
            Fl_Button {} {
              label Remove
              callback {Changed = true;
int i = Name->value();
VHostConf.removeName(i);
i = 0;
VHostConf.populateName(Name);
Name->value(i);
VHostConf.populateHost(i, Host);
VHostConf.populateIp(i, Ip);
Port->value(VHostConf.getPort(i));
Protocol->value(VHostConf.getProtocol(i));
Ssl_Privatekey->value(VHostConf.getSsl_Privatekey(i));
Ssl_Certificate->value(VHostConf.getSsl_Certificate(i));
Ssl_Password->value(VHostConf.getSsl_Password(i));
Docroot->value(VHostConf.getDocroot(i));
Sysfolder->value(VHostConf.getSysfolder(i));
Accesseslog->value(VHostConf.getAccesseslog(i));
Warninglog->value(VHostConf.getWarninglog(i));
i = Protocol->value();
if(i != 1 && i != 3) {
  Ssl_Privatekey->deactivate();
  Ssl_Certificate->deactivate();
  Ssl_Password->deactivate();
  SslButton1->deactivate();
  SslButton2->deactivate();
}
else {
  Ssl_Privatekey->activate();
  Ssl_Certificate->activate();
  Ssl_Password->activate();
  SslButton1->activate();
  SslButton2->activate();
}}
              xywh {450 70 80 25}
            }
          }
          Fl_Group {} {
            xywh {10 110 625 240} box ENGRAVED_FRAME
          } {
            Fl_Tabs {} {
              xywh {19 120 616 225}
            } {
              Fl_Group {} {
                label Protocol
                xywh {20 145 510 195} hide
              } {
                Fl_Choice Protocol {
                  label {Protocol:}
                  callback {Changed = true;
int i = Name->value();
VHostConf.setProtocol(i, Protocol->value());
int pval = Protocol->value();
if(pval != 1 && pval != 3) {
  VHostConf.setSsl_Privatekey(i, EMPTY);
  VHostConf.setSsl_Certificate(i, EMPTY);
  VHostConf.setSsl_Password(i, EMPTY);
  Ssl_Privatekey->value(EMPTY);
  Ssl_Certificate->value(EMPTY);
  Ssl_Password->value(EMPTY);
  Ssl_Privatekey->deactivate();
  Ssl_Certificate->deactivate();
  Ssl_Password->deactivate();
  SslButton1->deactivate();
  SslButton2->deactivate();
}
else {
  Ssl_Privatekey->activate();
  Ssl_Certificate->activate();
  Ssl_Password->activate();
  SslButton1->activate();
  SslButton2->activate();
}

// set default vals
switch(pval) {
  case 0 :
    Port->value(80);
    VHostConf.setPort(i, 80);
    break;
  case 1 :
    Port->value(443);
    VHostConf.setPort(i, 443);
    break;
  case 2 :
    Port->value(21);
    VHostConf.setPort(i, 21);
    break;
  case 3 :
    Port->value(270);
    VHostConf.setPort(i, 270);
    break;
  default :
    break;
}}
                  xywh {180 155 215 25} down_box BORDER_BOX when 1
                } {
                  MenuItem {} {
                    label HTTP
                    xywh {5 5 100 20}
                  }
                  MenuItem {} {
                    label HTTPS
                    xywh {5 5 100 20}
                  }
                  MenuItem {} {
                    label FTP
                    xywh {5 5 100 20}
                  }
                  MenuItem {} {
                    label CONTROL
                    xywh {0 0 100 20}
                  }
                }
                Fl_Input Ssl_Privatekey {
                  label {SSL private key:}
                  callback {Changed = true;
int i = Name->value();
VHostConf.setSsl_Privatekey(i, Ssl_Privatekey->value());}
                  xywh {180 185 215 25} when 1 deactivate
                }
                Fl_Input Ssl_Certificate {
                  label {SSL certificate:}
                  callback {Changed = true;
int i = Name->value();
VHostConf.setSsl_Certificate(i, Ssl_Certificate->value());}
                  xywh {180 215 215 25} when 1 deactivate
                }
                Fl_Input Ssl_Password {
                  label {SSL password:}
                  callback {Changed = true;
int i = Name->value();
VHostConf.setSsl_Password(i, Ssl_Password->value());}
                  xywh {180 245 215 25} type Secret when 1 deactivate
                }
                Fl_Button SslButton1 {
                  label {Browse...}
                  callback {char * chrptr = fl_file_chooser("", "", "");
if(chrptr != 0) {
  Changed = true;
  int i = Name->value();
  VHostConf.setSsl_Privatekey(i, chrptr);
  Ssl_Privatekey->value(chrptr);
}}
                  xywh {405 185 85 25} deactivate
                }
                Fl_Button SslButton2 {
                  label {Browse...}
                  callback {char * chrptr = fl_file_chooser("", "", "");
if(chrptr != 0) {
  Changed = true;
  int i = Name->value();
  VHostConf.setSsl_Certificate(i, chrptr);
  Ssl_Certificate->value(chrptr);
}}
                  xywh {405 215 85 25} deactivate
                }
              }
              Fl_Group {} {
                label Arpa
                xywh {20 145 510 195} hide
              } {
                Fl_Browser Host {
                  label Host
                  xywh {30 165 170 135} type Hold align 1
                }
                Fl_Browser Ip {
                  label IP
                  xywh {210 165 170 135} type Hold align 1
                }
                Fl_Button {} {
                  label {Add...}
                  callback {char * val;
int NameNo, i;
bool reg = false;
val = (char *)regex_input(LanguageXMLEnter_Host, reg);
if(val != 0) {
  Changed = true;
  NameNo = Name->value();
  i = VHostConf.addHost(NameNo, val, reg);
  VHostConf.populateHost(NameNo, Host);
  Host->value(i + 1);
}}
                  xywh {30 305 80 25}
                }
                Fl_Button {} {
                  label Remove
                  callback {int i, NameNo;
i = Host->value();
if(i != 0) {
  Changed = true;
  NameNo = Name->value();
  VHostConf.removeHost(NameNo, i - 1);
  VHostConf.populateHost(NameNo, Host);
}}
                  xywh {120 305 80 25}
                }
                Fl_Button {} {
                  label {Add...}
                  callback {char * val;
int NameNo, i;
bool reg;
val = (char *)regex_input(LanguageXMLEnter_Ip, reg);
if(val != 0) {
  Changed = true;
  NameNo = Name->value();
  i = VHostConf.addIp(NameNo, val, reg);
  VHostConf.populateIp(NameNo, Ip);
  Ip->value(i + 1);
}}
                  xywh {210 305 80 25}
                }
                Fl_Button {} {
                  label Remove
                  callback {int i, NameNo;
i = Ip->value();
if(i != 0) {
  Changed = true;
  NameNo = Name->value();
  VHostConf.removeIp(NameNo, i - 1);
  VHostConf.populateIp(NameNo, Ip);
}}
                  xywh {300 305 80 25}
                }
                Fl_Value_Input Port {
                  label {Port:}
                  callback {Changed = true;
int i = Name->value();
VHostConf.setPort(i, (int)Port->value());}
                  xywh {435 165 65 25} maximum 10240 step 1
                }
              }
              Fl_Group {} {
                label {HTTP Services}
                xywh {25 140 510 195} hide
              } {
                Fl_Box {} {
                  label {Enable:}
                  xywh {45 150 115 25} align 20
                }
                Fl_Check_Button Allow_CGI {
                  label CGI
                  callback {Changed = true;
int i = Name->value();
VHostConf.setService(i, ALLOW_CGI, Allow_CGI->value());}
                  xywh {65 175 20 25} down_box DOWN_BOX align 8 when 1
                }
                Fl_Check_Button Allow_ISAPI {
                  label ISAPI
                  callback {Changed = true;
int i = Name->value();
VHostConf.setService(i, ALLOW_ISAPI, Allow_ISAPI->value());}
                  xywh {65 195 20 25} down_box DOWN_BOX align 8 when 1
                }
                Fl_Check_Button Allow_MSCGI {
                  label MSCGI
                  callback {Changed = true;
int i = Name->value();
VHostConf.setService(i, ALLOW_MSCGI, Allow_MSCGI->value());}
                  xywh {65 215 20 25} down_box DOWN_BOX align 8 when 1
                }
                Fl_Check_Button Allow_WINCGI {
                  label WINCGI
                  callback {Changed = true;
int i = Name->value();
VHostConf.setService(i, ALLOW_WINCGI, Allow_WINCGI->value());}
                  xywh {65 235 20 25} down_box DOWN_BOX align 8 when 1
                }
                Fl_Check_Button Allow_FASTCGI {
                  label FASTCGI
                  callback {Changed = true;
int i = Name->value();
VHostConf.setService(i, ALLOW_FASTCGI, Allow_FASTCGI->value());}
                  xywh {65 255 20 25} down_box DOWN_BOX align 8 when 1
                }
                Fl_Check_Button Allow_SCGI {
                  label SCGI
                  callback {Changed = true;
int i = Name->value();
VHostConf.setService(i, ALLOW_SCGI, Allow_SCGI->value());}
                  xywh {235 175 20 25} down_box DOWN_BOX align 8 when 1
                }
                Fl_Check_Button Allow_SEND_LINK {
                  label {SEND LINK}
                  callback {Changed = true;
int i = Name->value();
VHostConf.setService(i, ALLOW_SEND_LINK, Allow_SEND_LINK->value());}
                  xywh {235 195 20 25} down_box DOWN_BOX align 8 when 1
                }
                Fl_Check_Button Allow_EXTERNAL_COMMANDS {
                  label {EXTERNAL COMMANDS}
                  callback {Changed = true;
int i = Name->value();
VHostConf.setService(i, ALLOW_EXTERNAL_COMMANDS, Allow_EXTERNAL_COMMANDS->value());}
                  xywh {235 215 20 25} down_box DOWN_BOX align 8 when 1
                }
                Fl_Check_Button Allow_SEND_FILE {
                  label {SEND FILE}
                  callback {Changed = true;
int i = Name->value();
VHostConf.setService(i, ALLOW_SEND_FILE, Allow_SEND_FILE->value());}
                  xywh {235 235 20 25} down_box DOWN_BOX align 8 when 1
                }
              }
              Fl_Group {} {
                label Directories
                xywh {20 145 510 195} hide
              } {
                Fl_Input Docroot {
                  label {Document root:}
                  callback {Changed = true;
int i = Name->value();
VHostConf.setDocroot(i, Docroot->value());}
                  xywh {180 155 215 25} when 1
                }
                Fl_Input Sysfolder {
                  label {System folder:}
                  callback {Changed = true;
int i = Name->value();
VHostConf.setSysfolder(i, Sysfolder->value());}
                  xywh {180 185 215 25} when 1
                }
                Fl_Button {} {
                  label {Browse...}
                  callback {char * chrptr = fl_dir_chooser("", "");
if(chrptr != 0) {
  Changed = true;
  int i = Name->value();
  VHostConf.setDocroot(i, chrptr);
  Docroot->value(chrptr);
}}
                  xywh {405 155 85 25}
                }
                Fl_Button {} {
                  label {Browse...}
                  callback {char * chrptr = fl_dir_chooser("", "");
if(chrptr != 0) {
  Changed = true;
  int i = Name->value();
  VHostConf.setSysfolder(i, chrptr);
  Sysfolder->value(chrptr);
}}
                  xywh {405 185 85 25}
                }
              }
              Fl_Group {} {
                label Logs
                xywh {20 145 510 195}
              } {
                Fl_Input Accesseslog {
                  label {Accesses log file:}
                  callback {Changed = true;
int i = Name->value();
VHostConf.setAccesseslog(i, Accesseslog->value());}
                  xywh {180 155 215 25} when 1
                }
                Fl_Input Warninglog {
                  label {Warning log file:}
                  callback {Changed = true;
int i = Name->value();
VHostConf.setWarninglog(i, Warninglog->value());}
                  xywh {180 185 215 25} when 1
                }
              }
            }
          }
        }
        Fl_Group {} {
          label Administrator
          xywh {0 50 550 310} hide
        } {
          Fl_Input Server_Admin {
            label {Administrator e-mail:}
            callback {Changed = true;}
            xywh {295 60 190 25} when 1
          }
          Fl_Input Control_Admin {
            label {Administrator user name:}
            callback {Changed = true;}
            xywh {295 90 190 25} when 1 deactivate
          }
          Fl_Input Control_Password {
            label {Administrator password:}
            callback {Changed = true;}
            xywh {295 120 190 25} type Secret when 1 deactivate
          }
          Fl_Check_Button Control_Enabled {
            label {Enable control protocol:}
            callback {Changed = true;
if(Control_Enabled->value() == 1) {
  Control_Admin->activate();
  Control_Password->activate();
}
else {
  Control_Admin->deactivate();
  Control_Password->deactivate();
}}
            xywh {295 150 25 25} down_box DOWN_BOX align 4 when 1
          }
        }
        Fl_Group {} {
          label {FTP Services} open
          xywh {0 56 549 293} hide
        } {
          Fl_Box {} {
            label {Enable:}
            xywh {3 59 115 25} align 20
          }
          Fl_Check_Button Allow_Anonymous {
            label {Anonymous Access}
            callback {Changed = true;
if ( Allow_Anonymous->value() == 1 ){
Anonymous_Needs_Password->activate();
}
else{
Anonymous_Needs_Password->deactivate();
}}
            xywh {3 97 20 25} down_box DOWN_BOX align 8
          }
          Fl_Check_Button Anonymous_Needs_Password {
            label {Anonymous Needs Password}
            callback {Changed=true;}
            xywh {269 97 20 24} down_box DOWN_BOX align 8
          }
          Fl_Check_Button Allow_Asynchronous_Cmds {
            label {Asynchronous Commands}
            callback {Changed=true;}
            xywh {3 161 19 22} down_box DOWN_BOX align 8
          }
          Fl_Check_Button Allow_Pipelining {
            label Pipelining
            callback {Changed=true;}
            xywh {3 222 21 22} down_box DOWN_BOX align 8
          }
          Fl_Check_Button Allow_Store_Cmds {
            label {Write Commands}
            callback {Changed=true;}
            xywh {3 284 20 26} down_box DOWN_BOX align 8
          }
        }
      }
    }
    code {// Set FLTK function's text
  fl_ok = ctrl_gettext("OK");
  fl_cancel = ctrl_gettext("Cancel");} {}
  }
  Function {make_type()} {} {
    Fl_Window ConfTypeDlg {
      label {Chose Location} open
      xywh {532 584 303 152} type Double align 0 hide modal
    } {
      Fl_Group {} {
        label {Chose configuration file location:} open
        xywh {0 0 305 100} align 17
      } {
        Fl_Round_Button ConfTypeDlgLocal {
          label Local
          callback {ConfType = 1;}
          tooltip {Configuration files located in current directory} xywh {105 25 70 25} type Radio down_box ROUND_DOWN_BOX
        }
        Fl_Round_Button ConfTypeDlgUser {
          label User
          callback {ConfType = 2;}
          tooltip {Configuration files located in ~/.myserver} xywh {105 45 70 25} type Radio down_box ROUND_DOWN_BOX
        }
        Fl_Round_Button ConfTypeDlgGlobal {
          label Global
          callback {ConfType = 3;}
          tooltip {Configuration files located in /etc/myserver} xywh {105 65 70 25} type Radio down_box ROUND_DOWN_BOX
        }
      }
      Fl_Return_Button ConfTypeDlgOK {
        label OK
        xywh {65 108 65 30}
      }
      Fl_Button ConfTypeDlgCancel {
        label Cancel
        xywh {165 110 65 30}
      }
    }
  }
  Function {make_about()} {} {
    Fl_Window AboutDlg {
      label About open
      xywh {320 453 595 115} type Double hide modal
    } {
      Fl_Group {} {open
        image {../binaries/web/logo.png} xywh {15 20 155 80} align 21
      } {}
      Fl_Text_Display AboutText {
        xywh {185 10 305 95} align 0
      }
      Fl_Return_Button {} {
        label OK
        callback {AboutDlg->hide();}
        xywh {505 10 75 25}
      }
    }
    code {Fl_Text_Buffer * atext = new Fl_Text_Buffer;
atext->text(LanguageXMLAbout_Text);
AboutText->buffer(atext);} {}
  }
  Function {make_login()} {} {
    Fl_Window LoginDlg {
      label {Remote Login} open
      xywh {328 239 605 120} type Double hide modal
    } {
      Fl_Input LoginDlgAddress {
        label {Address:}
        xywh {90 20 275 25}
      }
      Fl_Value_Input LoginDlgPort {
        label {Port:}
        xywh {420 20 70 25} maximum 10240 step 1 value 270
      }
      Fl_Input LoginDlgName {
        label {Login name:}
        xywh {185 50 180 25}
      }
      Fl_Input LoginDlgPass {
        label {Login password:}
        xywh {185 80 180 25} type Secret
      }
      Fl_Return_Button LoginDlgOK {
        label OK
        xywh {510 20 75 25}
      }
      Fl_Button LoginDlgCancel {
        label Cancel
        xywh {510 55 75 25}
      }
    }
  }
  Function {make_status()} {} {
    Fl_Window StatusDlg {
      label Status open
      xywh {372 471 275 100} type Double hide modal
    } {
      Fl_Group StatusDlgGroup {open
        xywh {10 15 260 65} align 17
      } {
        Fl_Progress StatusDlgProgress {
          xywh {25 50 230 25} selection_color 229
          code0 {StatusDlgProgress->maximum(100);}
          code1 {StatusDlgProgress->minimum(0);}
          code2 {Server.setCallback(ProgressCallback, (void *)StatusDlgProgress);}
        }
      }
    }
  }
  Function {make_connections()} {} {
    Fl_Window ConnectionsDlg {
      label Connections open
      xywh {269 258 488 341} type Double hide modal
    } {
      Fl_Output ConnectionsDlgVr {
        label {Server:}
        xywh {65 15 140 25}
      }
      Fl_Browser ConnectionsDlgList {
        label {Connections (ID - IP - Port - LocalIP - LocalPort - Login - PWord)}
        xywh {10 60 470 235} type Hold align 1
      }
      Fl_Counter ConnectionsDlgRate {
        label {Update rate:}
        xywh {95 305 85 25} type Simple align 4 minimum 1 maximum 30 step 1 value 10
      }
      Fl_Button ConnectionsDlgKill {
        label {Kill connection}
        xywh {195 305 130 25}
      }
      Fl_Button ConnectionsDlgDone {
        label Done
        xywh {340 305 130 25}
      }
    }
  }
  Function {make_regask()} {} {
    Fl_Window RegaskDlg {open
      xywh {462 30 425 110} type Double hide modal
    } {
      Fl_Input RegaskDlgInput {
        xywh {75 35 340 25} align 5
      }
      Fl_Button RegaskDlgCancel {
        label Cancel
        xywh {340 70 75 25}
      }
      Fl_Return_Button RegaskDlgOK {
        label OK
        xywh {250 70 75 25}
      }
      Fl_Check_Button RegaskDlgRegex {
        label Regex
        xywh {75 65 95 25} down_box DOWN_BOX
      }
      Fl_Box {} {
        xywh {10 10 55 55} box THIN_UP_BOX color 255 labelfont 9 labelsize 43 labelcolor 4
        code0 {o->label("?");}
      }
    }
  }
  Function {ask_type()} {return_type int
  } {
    code {\#ifdef WIN32
return 1;
\#else
ConfTypeDlg->show();
int ret;
for(;;) {
  Fl_Widget *o = Fl::readqueue();
  if(!o) Fl::wait();
  else if(o == ConfTypeDlgOK) {ret = 0; break;}
  else if(o == ConfTypeDlgCancel) {ret = -1; break;}
  else if(o == ConfTypeDlg) {ret = -1; break;}
}
if(ret != -1) {
  if(ConfTypeDlgLocal->value())
    ret = 1;
  else if(ConfTypeDlgUser->value())
    ret = 2;
  else if(ConfTypeDlgGlobal->value())
    ret = 3;
}
ConfTypeDlg->hide();
return ret;
\#endif} {}
  }
  Function {load_config()} {return_type int
  } {
    code {const char * filename;
int i;
\#ifndef WIN32
const int FBSIZE = strlen(getenv("HOME")) + 40;
char FileBuffer[FBSIZE];
\#endif

// Loading of main myserver.xml file

switch(ConfType) {
  case 1 :
    filename = "myserver.xml";
    break;
\#ifndef WIN32
  case 2 :
    snprintf(FileBuffer, FBSIZE, "%s/.myserver/myserver.xml", getenv("HOME"));
    filename = FileBuffer;
    break;
  case 3 :
    filename = "/etc/myserver/myserver.xml";
    break;
\#endif
  default :
    return -1;
    break;
}

xmlFile.close();

if(xmlFile.open(filename) != 0)
  return -1;

load_myserver_core();

// Loading of MIMEtypes.xml file
switch(ConfType) {
  case 1 :
    filename = "MIMEtypes.xml";
    break;
\#ifndef WIN32
  case 2 :
    snprintf(FileBuffer, FBSIZE, "%s/.myserver/MIMEtypes.xml", getenv("HOME"));
    filename = FileBuffer;
    break;
  case 3 :
    filename = "/etc/myserver/MIMEtypes.xml";
    break;
\#endif
  default :
    return -1;
    break;
}

// Load the file
if(MimeConf.load(filename))
  return -1;

// Populate the interface
MimeConf.populateExt(Ext);
MimeConf.populateMime(Mime);

// Loading of virtualhosts.xml file
switch(ConfType) {
  case 1 :
    filename = "virtualhosts.xml";
    break;
\#ifndef WIN32
  case 2 :
    snprintf(FileBuffer, FBSIZE, "%s/.myserver/virtualhosts.xml", getenv("HOME"));
    filename = FileBuffer;
    break;
  case 3 :
    filename = "/etc/myserver/virtualhosts.xml";
    break;
\#endif
  default :
    return -1;
    break;
}

// Load the file
if(VHostConf.load(filename))
  return -1;

// Populate the interface
VHostConf.populateName(Name);
Name->value(0);
VHostConf.populateHost(0, Host);
VHostConf.populateIp(0, Ip);
Port->value(VHostConf.getPort(0));
Protocol->value(VHostConf.getProtocol(0));
Ssl_Privatekey->value(VHostConf.getSsl_Privatekey(0));
Ssl_Certificate->value(VHostConf.getSsl_Certificate(0));
Ssl_Password->value(VHostConf.getSsl_Password(0));
Docroot->value(VHostConf.getDocroot(0));
Sysfolder->value(VHostConf.getSysfolder(0));
Accesseslog->value(VHostConf.getAccesseslog(0));
Warninglog->value(VHostConf.getWarninglog(0));
Allow_CGI->value(VHostConf.getService(0, ALLOW_CGI));
Allow_ISAPI->value(VHostConf.getService(0, ALLOW_ISAPI));
Allow_MSCGI->value(VHostConf.getService(0, ALLOW_MSCGI));
Allow_WINCGI->value(VHostConf.getService(0, ALLOW_WINCGI));
Allow_FASTCGI->value(VHostConf.getService(0, ALLOW_FASTCGI));
Allow_SEND_LINK->value(VHostConf.getService(0, ALLOW_SEND_LINK));
Allow_EXTERNAL_COMMANDS->value(VHostConf.getService(0, ALLOW_EXTERNAL_COMMANDS));
Allow_SEND_FILE->value(VHostConf.getService(0, ALLOW_SEND_FILE));
i = Protocol->value();
if(i != 1 && i != 3) {
  Ssl_Privatekey->deactivate();
  Ssl_Certificate->deactivate();
  Ssl_Password->deactivate();
  SslButton1->deactivate();
  SslButton2->deactivate();
}
else {
  Ssl_Privatekey->activate();
  Ssl_Certificate->activate();
  Ssl_Password->activate();
  SslButton1->activate();
  SslButton2->activate();
}

// End of function
Changed = false;
return 0;} {}
  }
  Function {load_config_remote()} {return_type int
  } {
    code {int i;
int ret;
MemBuf Buffer;
Vector list;

// ======== Progress display ========
// Say something...
StatusDlgProgress->value(0);
StatusDlgProgress->label("0%");
StatusDlgGroup->label(mystrcat(LanguageXMLDownload_Config, " (1/5)"));
StatusDlg->show();
fl_wait(200);  // let fltk do its thing
// ======== Progress display ========

// Get remote languages listing
ret = Server.getLanguages(list);
if(ret) {
  StatusDlg->hide();
  return -1;
}
Language->clear();
for(i = 0; i < list.size(); i++) {
  Language->add(list.at(i)->Text);
}

// ======== Progress display ========
// Say something...
StatusDlgProgress->value(0);
StatusDlgProgress->label("0%");
StatusDlgGroup->label(mystrcat(LanguageXMLDownload_Config, " (2/5)"));
StatusDlg->show();
fl_wait(200);  // let fltk do its thing
// ======== Progress display ========

// Get remote protocols
ret = Server.getDynamicProtocols(list);
if(ret) {
  StatusDlg->hide();
  return -1;
}
VHostConf.loadProtocols(list);
VHostConf.populateProtocol(Protocol);

// ======== Progress display ========
fl_wait(50);  // small delay
StatusDlgProgress->value(0);
StatusDlgProgress->label("0%");
StatusDlgGroup->label(mystrcat(LanguageXMLDownload_Config, " (3/5)"));
fl_wait(50);  // small delay
// ======== Progress display ========

// Load remote myserver.xml
ret = Server.getMyserverConf(Buffer);
if(ret) {
  StatusDlg->hide();
  return -1;
}

xmlFile.close();
ret = xmlFile.openMemBuf(Buffer);
if(ret) {
  StatusDlg->hide();
  return -2;
}

load_myserver_core();

// ======== Progress display ========
fl_wait(50);  // small delay
StatusDlgProgress->value(0);
StatusDlgProgress->label("0%");
StatusDlgGroup->label(mystrcat(LanguageXMLDownload_Config, " (4/5)"));
fl_wait(50);  // small delay
// ======== Progress display ========

// Load remote MIMEtypes.xml
ret = Server.getMIMEtypesConf(Buffer);
if(ret) {
  StatusDlg->hide();
  return -1;
}

ret = MimeConf.loadMemBuf(Buffer);
if(ret) {
  StatusDlg->hide();
  return -2;
}

// Populate the interface
MimeConf.populateExt(Ext);
MimeConf.populateMime(Mime);

// ======== Progress display ========
fl_wait(50);  // small delay
StatusDlgProgress->value(0);
StatusDlgProgress->label("0%");
StatusDlgGroup->label(mystrcat(LanguageXMLDownload_Config, " (5/5)"));
fl_wait(50);  // small delay
// ======== Progress display ========

// Load remote virtualhosts.xml
ret = Server.getVhostsConf(Buffer);
if(ret) {
  StatusDlg->hide();
  return -1;
}

ret = VHostConf.loadMemBuf(Buffer);
if(ret) {
  StatusDlg->hide();
  return -2;
}

// Populate the interface
VHostConf.populateName(Name);
Name->value(0);
VHostConf.populateHost(0, Host);
VHostConf.populateIp(0, Ip);
Port->value(VHostConf.getPort(0));
Protocol->value(VHostConf.getProtocol(0));
Ssl_Privatekey->value(VHostConf.getSsl_Privatekey(0));
Ssl_Certificate->value(VHostConf.getSsl_Certificate(0));
Ssl_Password->value(VHostConf.getSsl_Password(0));
Docroot->value(VHostConf.getDocroot(0));
Sysfolder->value(VHostConf.getSysfolder(0));
Accesseslog->value(VHostConf.getAccesseslog(0));
Warninglog->value(VHostConf.getWarninglog(0));
Allow_CGI->value(VHostConf.getService(0, ALLOW_CGI));
Allow_ISAPI->value(VHostConf.getService(0, ALLOW_ISAPI));
Allow_MSCGI->value(VHostConf.getService(0, ALLOW_MSCGI));
Allow_WINCGI->value(VHostConf.getService(0, ALLOW_WINCGI));
Allow_FASTCGI->value(VHostConf.getService(0, ALLOW_FASTCGI));
Allow_SCGI->value(VHostConf.getService(0, ALLOW_SCGI));
Allow_SEND_LINK->value(VHostConf.getService(0, ALLOW_SEND_LINK));
Allow_EXTERNAL_COMMANDS->value(VHostConf.getService(0, ALLOW_EXTERNAL_COMMANDS));
Allow_SEND_FILE->value(VHostConf.getService(0, ALLOW_SEND_FILE));
i = Protocol->value();
if(i != 1 && i != 3) {
  Ssl_Privatekey->deactivate();
  Ssl_Certificate->deactivate();
  Ssl_Password->deactivate();
  SslButton1->deactivate();
  SslButton2->deactivate();
}
else {
  Ssl_Privatekey->activate();
  Ssl_Certificate->activate();
  Ssl_Password->activate();
  SslButton1->activate();
  SslButton2->activate();
}

// ======== Progress display ========
fl_wait(500);  // oooo aaa effect
StatusDlg->hide();
// ======== Progress display ========

// End of function
Changed = false;
return 0;} {}
  }
  Function {load_myserver_core()} {return_type int
  } {
    code {char * chrptr;
int i;
// <LANGUAGE>
Language->value(0);
for(i = 0; i < Language->size(); i++) {
  if(strcmpi(getValueXML("LANGUAGE"), Language->text(i)) == 0) {
    Language->value(i);
    break;
  }
}

// <VERBOSITY>
Verbosity->value(atoi(getValueXML("VERBOSITY")));

// <NTHREADS_STATIC>
Nthreads_Static->value(atoi(getValueXML("NTHREADS_STATIC")));

// <NTHREADS_MAX>
Nthreads_Max->value(atoi(getValueXML("NTHREADS_MAX")));

// <BUFFER_SIZE>
Buffer_Size->value(atoi(getValueXML("BUFFER_SIZE")));

// <DEFAULT_FILENAME>
Default_Filename->clear();
xmlDocPtr xmlDoc = xmlFile.getDoc();
for(xmlNode *node = xmlDoc->children; node; node = node->next)
{
	if(!xmlStrcmp(node->name, (const xmlChar *)"MYSERVER"))
	{
		for(node = node->children; node; node = node->next)
		{
			if(!xmlStrcmp(node->name, (const xmlChar *)"DEFAULT_FILENAME"))
			{
				  Default_Filename->add((char*)node->children->content);
			}
		}
		break;
	}
}

// <CONNECTION_TIMEOUT>
Connection_Timeout->value(atoi(getValueXML("CONNECTION_TIMEOUT")));

// <USE_ERRORS_FILES>
chrptr = xmlFile.getValue("USE_ERRORS_FILES");
if(chrptr != 0 && chrptr[0] == 'Y' && chrptr[1] == 'E')
  Use_Errors_Files->set();
else
  Use_Errors_Files->clear();

// <MAX_CONNECTIONS>
Max_Connections->value(atoi(getValueXML("MAX_CONNECTIONS")));

// <MAX_LOG_FILE_SIZE>
Max_Log_File_Size->value(atoi(getValueXML("MAX_LOG_FILE_SIZE")));

// <BROWSEFOLDER_CSS>
Browsefolder_Css->value(getValueXML("BROWSEFOLDER_CSS"));

// <SERVER_ADMIN>
Server_Admin->value(getValueXML("SERVER_ADMIN"));

// <GZIP_THRESHOLD>
Gzip_Threshold->value(atoi(getValueXML("GZIP_THRESHOLD")));

// <CONTROL_ENABLED>
chrptr = xmlFile.getValue("CONTROL_ENABLED");
if(chrptr != 0 && chrptr[0] == 'Y' && chrptr[1] == 'E') {
  Control_Enabled->set();
  Control_Admin->activate();
  Control_Password->activate();
  // <CONTROL_ADMIN>
  Control_Admin->value(getValueXML("CONTROL_ADMIN"));
  // <CONTROL_PASSWORD>
  Control_Password->value("");
}
else {
  Control_Enabled->clear();
  Control_Admin->deactivate();
  Control_Password->deactivate();
  Control_Admin->value("");
  Control_Password->value("");
}

//<ALLOW_ANONYMOUS>
chrptr = xmlFile.getValue("ALLOW_ANONYMOUS");
if(chrptr != 0 && chrptr[0] == 'Y' && chrptr[1] == 'E') {
  Allow_Anonymous->set();
} else {
  Allow_Anonymous->clear();
}
//<ANONYMOUS_NEED_PASS>
chrptr = xmlFile.getValue("ANONYMOUS_NEED_PASS");
if(chrptr != 0 && chrptr[0] == 'Y' && chrptr[1] == 'E') {
  Anonymous_Needs_Password->set();
} else {
  Anonymous_Needs_Password->clear();
}
if ( Allow_Anonymous->value() == 1 ){
Anonymous_Needs_Password->activate();
}
else{
Anonymous_Needs_Password->deactivate();
}
//<ALLOW_ASYNCHRONOUS_CMDS>
chrptr = xmlFile.getValue("ALLOW_ASYNCHRONOUS_CMDS");
if(chrptr != 0 && chrptr[0] == 'Y' && chrptr[1] == 'E') {
  Allow_Asynchronous_Cmds->set();
} else {
  Allow_Asynchronous_Cmds->clear();
}
//<ALLOW_PIPELINING>
chrptr = xmlFile.getValue("ALLOW_PIPELINING");
if(chrptr != 0 && chrptr[0] == 'Y' && chrptr[1] == 'E') {
  Allow_Pipelining->set();
} else {
  Allow_Pipelining->clear();
}
//<ALLOW_STORE>
chrptr = xmlFile.getValue("ALLOW_STORE");
if(chrptr != 0 && chrptr[0] == 'Y' && chrptr[1] == 'E') {
  Allow_Store_Cmds->set();
} else {
  Allow_Store_Cmds->clear();
}

// End of myserver.xml file
return 0;} {}
  }
  Function {save_config()} {return_type int
  } {
    code {const char * filename;
\#ifndef WIN32
const int FBSIZE = strlen(getenv("HOME")) + 40;
char FileBuffer[FBSIZE];
\#endif

// Saveing of main myserver.xml file

switch(ConfType) {
  case 1 :
    filename = "myserver.xml";
    break;
\#ifndef WIN32
  case 2 :
    snprintf(FileBuffer, FBSIZE, "%s/.myserver/myserver.xml", getenv("HOME"));
    filename = FileBuffer;
    break;
  case 3 :
    filename = "/etc/myserver/myserver.xml";
    break;
\#endif
  default :
    return -1;
    break;
}

xmlFile.close();

if(xmlFile.open(filename) != 0)
  return -1;

save_myserver_core();

xmlFile.save(filename);

// Saveing of MIMEtypes.xml file
switch(ConfType) {
  case 1 :
    filename = "MIMEtypes.xml";
    break;
\#ifndef WIN32
  case 2 :
    snprintf(FileBuffer, FBSIZE, "%s/.myserver/MIMEtypes.xml", getenv("HOME"));
    filename = FileBuffer;
    break;
  case 3 :
    filename = "/etc/myserver/MIMEtypes.xml";
    break;
\#endif
  default :
    return -1;
    break;
}

// Save the file
if(MimeConf.save(filename))
  return -1;

// Saveing of virtualhosts.xml file
switch(ConfType) {
  case 1 :
    filename = "virtualhosts.xml";
    break;
\#ifndef WIN32
  case 2 :
    snprintf(FileBuffer, FBSIZE, "%s/.myserver/virtualhosts.xml", getenv("HOME"));
    filename = FileBuffer;
    break;
  case 3 :
    filename = "/etc/myserver/virtualhosts.xml";
    break;
\#endif
  default :
    return -1;
    break;
}

// Save the file
if(VHostConf.save(filename))
  return -1;

// End of function
Changed = false;
return 0;} {}
  }
  Function {save_config_remote()} {return_type int
  } {
    code {int ret;
MemBuf Buffer;

// ======== Progress display ========
// Say something...
StatusDlgProgress->value(0);
StatusDlgProgress->label("0%");
StatusDlgGroup->label(mystrcat(LanguageXMLSend_Config, " (1/3)"));
StatusDlg->show();
fl_wait(200);  // let fltk do its thing
// ======== Progress display ========

ret = Server.sendDisableReboot();
if(ret) {
  StatusDlg->hide();
  return -1;
}

// Send myserver.xml
save_myserver_core();

xmlFile.saveMemBuf(Buffer);

ret = Server.sendMyserverConf(Buffer);
if(ret) {
  StatusDlg->hide();
  return -1;
}

// ======== Progress display ========
fl_wait(50);  // small delay
StatusDlgProgress->value(0);
StatusDlgProgress->label("0%");
StatusDlgGroup->label(mystrcat(LanguageXMLSend_Config, " (2/3)"));
fl_wait(50);  // small delay
// ======== Progress display ========

// Send MIMEtypes.xml
ret = MimeConf.saveMemBuf(Buffer);
if(ret) {
  StatusDlg->hide();
  return -2;
}

ret = Server.sendMIMEtypesConf(Buffer);
if(ret) {
  StatusDlg->hide();
  return -1;
}

// ======== Progress display ========
fl_wait(50);  // small delay
StatusDlgProgress->value(0);
StatusDlgProgress->label("0%");
StatusDlgGroup->label(mystrcat(LanguageXMLSend_Config, " (3/3)"));
fl_wait(50);  // small delay
// ======== Progress display ========

// Send virtualhosts.xml
ret = VHostConf.saveMemBuf(Buffer);
if(ret) {
  StatusDlg->hide();
  return -2;
}

ret = Server.sendVhostsConf(Buffer);
if(ret) {
  StatusDlg->hide();
  return -1;
}

ret = Server.sendEnableReboot();
if(ret) {
  StatusDlg->hide();
  return -1;
}

// ======== Progress display ========
fl_wait(500);  // oooo aaa effect
StatusDlg->hide();
// ======== Progress display ========

// End of function
Changed = false;
return 0;} {}
  }
  Function {save_myserver_core()} {return_type int
  } {
    code {char Buffer[256];
int i;

if(!xmlFile.getDoc()) {  // the file dose not exist so make one
   xmlFile.newfile("MYSERVER");
}

// <LANGUAGE>
setValueXML("LANGUAGE", Language->text());

// <VERBOSITY>
i = (int)Verbosity->value();
snprintf(Buffer, 256, "%d", i);
setValueXML("VERBOSITY", Buffer);

// <NTHREADS_STATIC>
i = (int)Nthreads_Static->value();
snprintf(Buffer, 256, "%d", i);
setValueXML("NTHREADS_STATIC", Buffer);

// <NTHREADS_MAX>
i = (int)Nthreads_Max->value();
snprintf(Buffer, 256, "%d", i);
setValueXML("NTHREADS_MAX", Buffer);

// <BUFFER_SIZE>
i = (int)Buffer_Size->value();
snprintf(Buffer, 256, "%d", i);
setValueXML("BUFFER_SIZE", Buffer);

// <DEFAULT_FILENAME>
for(i = 0; i < Default_Filename->size(); i++) {
  setValueXML("DEFAULT_FILENAME",  Default_Filename->text(i + 1));
}

// <CONNECTION_TIMEOUT>
i = (int)Connection_Timeout->value();
snprintf(Buffer, 256, "%d", i);
setValueXML("CONNECTION_TIMEOUT", Buffer);

// <USE_ERRORS_FILES>
if(Use_Errors_Files->value())
  setValueXML("USE_ERRORS_FILES", "YES");
else
  setValueXML("USE_ERRORS_FILES", "NO");

// <MAX_CONNECTIONS>
i = (int)Max_Connections->value();
snprintf(Buffer, 256, "%d", i);
setValueXML("MAX_CONNECTIONS", Buffer);

// <MAX_LOG_FILE_SIZE>
i = (int)Max_Log_File_Size->value();
snprintf(Buffer, 256, "%d", i);
setValueXML("MAX_LOG_FILE_SIZE", Buffer);

// <BROWSEFOLDER_CSS>
setValueXML("BROWSEFOLDER_CSS", Browsefolder_Css->value());

// <SERVER_ADMIN>
setValueXML("SERVER_ADMIN", Server_Admin->value());

// <GZIP_THRESHOLD>
i = (int)Gzip_Threshold->value();
snprintf(Buffer, 256, "%d", i);
setValueXML("GZIP_THRESHOLD", Buffer);

// <CONTROL_ENABLED>
if(Control_Enabled->value() == 1) {
  setValueXML("CONTROL_ENABLED", "YES");
  // <CONTROL_ADMIN>
  setValueXML("CONTROL_ADMIN", Control_Admin->value());
  // <CONTROL_PASSWORD>
  const char * chrptr = Control_Password->value();
  if(chrptr[0] != '\\0') {
    char tempbuffer[32];
    Md5 md5;
    md5.init();
    md5.update((const unsigned char*)chrptr, strlen(chrptr));
    md5.end(tempbuffer);
    setValueXML("CONTROL_PASSWORD", tempbuffer);
    xmlFile.setAttr("MD5", "YES");
  }
}
else {
  setValueXML("CONTROL_ENABLED", "NO");
}

//<ALLOW_ANONYMOUS>
if(Allow_Anonymous->value() == 1) {
  setValueXML("ALLOW_ANONYMOUS", "YES");
} else {
  setValueXML("ALLOW_ANONYMOUS", "NO");
}
//<ANONYMOUS_NEED_PASS>
if(Anonymous_Needs_Password->value() == 1) {
  setValueXML("ANONYMOUS_NEED_PASS", "YES");
} else {
  setValueXML("ANONYMOUS_NEED_PASS", "NO");
}
//<ALLOW_ASYNCHRONOUS_CMDS>
if(Allow_Asynchronous_Cmds->value() == 1) {
  setValueXML("ALLOW_ASYNCHRONOUS_CMDS", "YES");
} else {
  setValueXML("ALLOW_ASYNCHRONOUS_CMDS", "NO");
}
//<ALLOW_PIPELINING>
if(Allow_Pipelining->value() == 1) {
  setValueXML("ALLOW_PIPELINING", "YES");
} else {
  setValueXML("ALLOW_PIPELINING", "NO");
}
//<ALLOW_STORE>
if(Allow_Store_Cmds->value() == 1) {
  setValueXML("ALLOW_STORE", "YES");
} else {
  setValueXML("ALLOW_STORE", "NO");
}

// End of myserver.xml file
return 0;} {}
  }
  Function {setDynamic(Vector & list)} {return_type void
  } {
    code {VHostConf.loadProtocols(list);
VHostConf.populateProtocol(Protocol);} {}
  }
  decl {int ConfType;} {public
  }
  Function {getValueXML(const char * name)} {private return_type {const char *}
  } {
    code {char * chrptr;
chrptr = xmlFile.getValue((char *)name);
if(chrptr == 0)
  return "";
return chrptr;} {}
  }
  Function {setValueXML(const char * name, const char * value)} {private return_type void
  } {
    code {char * chrptr;
chrptr = xmlFile.getValue((char *)name);
if(chrptr == 0)
  xmlFile.addChild(name, value);
else
  xmlFile.setValue((char *)name, (char *)value);} {}
  }
  Function {ServerLogout()} {private return_type void
  } {
    code {Server.Logout();
MenuLogout->deactivate();
MenuGetConfig->deactivate();
MenuSendConfig->deactivate();
MenuConnections->deactivate();
MenuReboot->deactivate();} {}
  }
  Function {ServerLogin(bool stat)} {private return_type int
  } {
    code {LoginDlg->show();
int ret;
for(;;) {
  Fl_Widget *o = Fl::readqueue();
  if(!o) Fl::wait();
  else if(o == LoginDlgOK) {ret = 0; break;}
  else if(o == LoginDlgCancel) {ret = -1; break;}
  else if(o == LoginDlg) {ret = -1; break;}
}
LoginDlg->hide();

if(ret) {
  LoginDlgPass->value("");
  return -1;
}

if(stat) {
  // Say something...
  StatusDlgProgress->value(0);
  StatusDlgProgress->label("0%");
  StatusDlgGroup->label(LanguageXMLConnect_Server);
  StatusDlg->show();
  fl_wait(200);  // let fltk do its thing
}

ret = Server.Login(LoginDlgAddress->value(),
                   (int)LoginDlgPort->value(),
                   LoginDlgName->value(),
                   LoginDlgPass->value());

LoginDlgPass->value("");

if(ret) {
  StatusDlg->hide();
  fl_alertcat(LanguageXMLLogin_Failed, Server.LastCode);
  return -1;
}

MenuLogout->activate();
MenuGetConfig->activate();
MenuSendConfig->activate();
MenuConnections->activate();
MenuReboot->activate();

if(stat) {
  // Show we are done...
  StatusDlgProgress->value(100);
  StatusDlgProgress->label("100%");
  fl_wait(500);  // oooo aaa effect
  StatusDlg->hide();
}

return 0;} {}
  }
  Function {ServerConnections()} {private return_type void
  } {
    code {int ret;
int time;
int i;
MemBuf MSvr;
Vector list;
ConnectionsDlgVr->value("");
ConnectionsDlgList->clear();
ConnectionsDlg->show();
fl_wait(200);

// see if we are connected by getting the vr
ret = Server.getVersion(MSvr);

if(ret) { // relogin?
  ret = ServerLogin(false);
  if(!ret) {
    ret = Server.getVersion(MSvr);
  }
}

if(ret) { // no dice
  fl_alert(LanguageXMLCannot_Connect);
  ConnectionsDlg->hide();
  return;
}

// update display
MSvr << '\\0';
ConnectionsDlgVr->value((const char *)MSvr.getBuffer());

time = getTicks();
ConnectionsDlgList->clear();
ret = Server.getConnections(list);

if(ret) {
  fl_alertcat(LanguageXMLServer_Closed, Server.LastCode);
  ConnectionsDlg->hide();
  ServerLogout();
  return;
}

list.sort();
for(i = 0; i < list.size(); i++) {
  ConnectionsDlgList->add(list.at(i)->Text);
}

for(;;) {
  Fl_Widget *o = Fl::readqueue();
  if(!o) Fl::wait(1);
  else if(o == ConnectionsDlgDone) {break; }
  else if(o == ConnectionsDlg) {break; }
  else if(o == ConnectionsDlgKill) {
    i = ConnectionsDlgList->value();
    if(i != 0) {
      ret = Server.sendKillConnection(list.at(i - 1));
      if(ret) {
        fl_alertcat(LanguageXMLServer_Closed, Server.LastCode);
        ServerLogout();
        break;
      } // if
      // A cheap trick
      time = (int)getTicks() - (int)ConnectionsDlgRate->value() * 2000;
    } // if
  } // else if

  if((int)(getTicks() - time) > (int)ConnectionsDlgRate->value() * 1000) {
    time = getTicks();
    ConnectionsDlgList->clear();
    ret = Server.getConnections(list);

    if(ret) {
      fl_alertcat(LanguageXMLServer_Closed, Server.LastCode);
      ServerLogout();
      break;
    } // if

    list.sort();
    for(i = 0; i < list.size(); i++) {
      ConnectionsDlgList->add(list.at(i)->Text);
    } // for
  } // if
} // for

ConnectionsDlg->hide();} {}
  }
  Function {regex_input(const char * capt, bool & reg)} {private return_type {char *}
  } {
    code {fl_beep(FL_BEEP_QUESTION);
RegaskDlgInput->value("");
RegaskDlgInput->label(capt);
RegaskDlgRegex->value(false);
RegaskDlg->hotspot(RegaskDlgCancel);
RegaskDlg->show();
int ret;
for(;;) {
  Fl_Widget *o = Fl::readqueue();
  if(!o) Fl::wait();
  else if(o == RegaskDlgOK) {ret = 0; break;}
  else if(o == RegaskDlgCancel) {ret = -1; break;}
  else if(o == RegaskDlg) {ret = -1; break;}
}
RegaskDlg->hide();

if(ret || strcmp(RegaskDlgInput->value(), "") == 0) {
  return NULL;
}
  
reg = RegaskDlgRegex->value();
return (char *)RegaskDlgInput->value();} {}
  }
  Function {fl_alertcat(const char * c1, const char * c2)} {private return_type void
  } {
    code {char temp[strlen(c1) + strlen(c2)];
strncpy(temp, c1, (strlen(c1) + strlen(c2)));
strncat(temp, c2, (strlen(c1) + strlen(c2) + 1));
fl_alert(temp);} {}
  }
  Function {fl_wait(int len)} {private return_type void
  } {
    code {int time = (int)getTicks();
while((int)(getTicks() - time) < len) {
  Fl::wait(0);
}} {}
  }
  Function {mystrcat(const char * a, const char * b)} {private return_type {const char *}
  } {
    code {static char temp[255];
strncpy(temp, a, 255);
strncat(temp, b, 255);
return temp;} {}
  }
  decl {bool Changed;} {}
  decl {MIMEtypeXML MimeConf;} {}
  decl {VHostXML VHostConf;} {}
  decl {XmlParser xmlFile;} {}
  decl {ControlClient Server;} {}
} 
