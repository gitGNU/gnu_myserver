AC_INIT(MyServer,0.8.9-rc1)
AM_CONFIG_HEADER(config.h)
CFLAGS="${CFLAGS=}"
CXXFLAGS="${CXXFLAGS=}"
LDFLAGS="${LDFLAGS=}"
AC_CANONICAL_HOST
AM_INIT_AUTOMAKE
AC_PROG_CC
AC_PROG_CPP
AC_AIX
AC_ISC_POSIX
AC_MINIX
AC_HEADER_STDC
AC_PROG_CXX
AC_PROG_CXXCPP
AC_PROG_RANLIB
AC_PROG_LIBTOOL

CFLAGS="$CFLAGS $_LT_AC_TAGVAR(lt_prog_compiler_pic, CXX)"
CXXFLAGS="$CXXFLAGS $_LT_AC_TAGVAR(lt_prog_compiler_pic, CXX)"
LDFLAGS="$LDFLAGS $_LT_AC_TAGVAR(lt_prog_compiler_pic, CXX)"

AC_SUBST(CFLAGS)
AC_SUBST(CXFLAGS)
AC_SUBST(LDFLAGS)

AC_ARG_WITH([root-prefix], [  --with-root-prefix=PREFIX override prefix variable for files to be placed in the root], root_prefix=$withval, root_prefix="")

root_bindir='${root_prefix}/bin'
root_sbindir='${root_prefix}/sbin'
root_sysconfdir='${root_prefix}/etc'

AC_SUBST(root_prefix)
AC_SUBST(root_bindir)
AC_SUBST(root_sbindir)
AC_SUBST(root_sysconfdir)


AC_ARG_WITH([myserver-headers], [  --with-myserver-headers=path Override the myserver headers location (used by modules)], MYSERVER_HEADERS=$withval, MYSERVER_HEADERS="`pwd`/include")
AC_ARG_WITH([mscgi-headers], [  --with-mscgi-headers=path Override the myserver MSCGI headers location (used by modules)], MSCGI_HEADERS=$withval, MSCGI_HEADERS="`pwd`/cgi-lib")

AC_SUBST(MYSERVER_HEADERS)
AC_SUBST(MSCGI_HEADERS)


dnl Looking for argp.h
AC_CHECK_HEADER([argp.h], AC_DEFINE(ARGP, 1, [Define if GNU argp tools are available]))

dnl Looking for error.h
AC_CHECK_HEADER([error.h], AC_DEFINE(ERRORH, 1, [Define if the error.h file is present]))

AC_CHECK_HEADER([grp.h], AC_DEFINE(GRP, 1, [Define if grp.h is available]))

AC_CHECK_HEADER([sys/sendfile.h], AC_DEFINE(SENDFILE, 1, [Define if the sendfile syscall is present]))


AC_CHECK_FUNCS(regcomp, AC_DEFINE(REGEX, 1, [Define if the regex library is present]) )

AC_CHECK_FUNCS(gettimeofday, AC_DEFINE(GETTIMEOFDAY, 1, [Define if the gettimeofday function is present]) )

AC_CHECK_FUNCS(setgroups, AC_DEFINE(SETGROUPS, 1, [Define if the setgroups function is present]) )

AC_CHECK_FUNCS(localtime_r, AC_DEFINE(LOCALTIME_R, 1, [Define if the localtime_r function is present]) )

AC_CHECK_FUNCS(pipe, AC_DEFINE(PIPE, 1, [Define if the pipe function is present]) )

AC_CHECK_FUNCS(snprintf, AC_DEFINE(SNPRINTF, 1, [Define if the snprintf function is present]) )

dnl Looking for pthreads
GNOME_PTHREAD_CHECK
if test x$PTHREAD_LIB = x; then
   AC_MSG_ERROR([
*** This system appears to have no posix threads
*** Threads are required for MyServer
])
fi
AC_DEFINE(HAVE_PTHREAD, 1, [POSIX threads required for MyServer in a non-windows environment])

dnl See if we need -lxnet for arpa
AC_CHECK_LIB(xnet, accept, have_xnet=yes)
if test x$have_xnet = xyes; then
   XNET_LIB="-lxnet"
else
   XNET_LIB=""
fi
AC_SUBST(XNET_LIB)


dnl check for Unix98 socklen_t
 AC_MSG_CHECKING(if socklen_t is defined)
 AC_TRY_COMPILE(
     [#include <sys/socket.h>],
     [socklen_t len = 10; return len;],
         [AC_MSG_RESULT(yes)],
         [AC_MSG_RESULT(no)
          AC_DEFINE(socklen_t, int, need to define this where socklen_t is not present)])

dnl Looking for dl
AC_CHECK_LIB(dl ,dlopen, have_dl=yes)
AC_CHECK_LIB(c ,dlopen, have_dl=yes; no_dl_ld=yes)

if test x$have_dl != xyes; then
   AC_MSG_WARN([
*** dlLIB not found
*** MSCGI support will not function
])
   AC_DEFINE(DO_NOT_USE_MSCGI, 1, [MSCGI support in MyServer, define to 1 to disable])
   DL_LIB=""
   MAKE_MSCGI=no
else
   MAKE_MSCGI=yes
   AC_DEFINE(HAVE_DL, 1, [LibDL support, define to 1 to enable])
   DL_LIB="-ldl"
fi
if test x$no_dl_ld = xyes; then
   DL_LIB=""
fi
AC_SUBST(DL_LIB)



# Libidn checks
# -------------
AC_CHECK_HEADER(idna.h,, 
[
   AC_MSG_WARN([idna.h not found which is part of GNU libidn.])
])

AC_ARG_WITH(idn-lib,
  [[  --with-idn-lib=FILE     Use the given path to the idn library.]],
  [
	if test "$withval" != "yes" -a "$withval" != ""; then
		 IDN_LIB=$withval
		 fi
  ])

if test "x$IDN_LIB" = "x"; then
    AC_CHECK_LIB(idn, stringprep_check_version, 	
		have_idn="yes")

		if test "x$have_idn" = "xyes"; then
				IDN_LIB="-lidn"
				AC_DEFINE(HAVE_IDN, 1, [Define if the IDN library is present])
		fi
  fi

#if test "x$have_idn" = "xyes"; then
#	LDFLAGS="$LDFLAGS $IDN_LIB"
#fi

AC_SUBST(IDN_LIB)


dnl Looking for LibXL2
AM_PATH_XML2(2.6.0, have_xml2=yes)
if test x$have_xml2 != xyes; then
    AC_MSG_ERROR([
*** Cannot find libXML2
*** libXML2 is required for MyServer
])

else
	CPPFLAGS="$CPPFLAGS $XML_CPPFLAGS"
fi


dnl CHECKING FOR OPENSSL
    for dir in $withval /usr/local/ssl /usr/lib/ssl /usr/ssl /usr/pkg /usr/local /usr; do
        ssldir="$dir";
        if test -f "$dir/include/openssl/ssl.h"; then
            found_ssl="yes";
            CFLAGS="$CFLAGS -I$ssldir/include/openssl -DHAVE_SSL";
            CXXFLAGS="$CXXFLAGS -I$ssldir/include/openssl -DHAVE_SSL";
            break
        fi
        if test -f "$dir/include/ssl.h"; then
            found_ssl="yes";
            CFLAGS="$CFLAGS -I$ssldir/include/ -DHAVE_SSL";
            CXXFLAGS="$CXXFLAGS -I$ssldir/include/ -DHAVE_SSL";
            break
        fi
    done
    if test x_$found_ssl != x_yes; then
        AC_MSG_ERROR(Cannot find ssl libraries)
	AC_DEFINE(DO_NOT_USE_SSL, 1, [SSL support in MyServer, define to 1 to disable])
	OPENSSL_LIB="" # not set
    else
        printf "OpenSSL found in $ssldir\n";
        LDFLAGS="$LDFLAGS -L$ssldir/lib";
				OPENSSL_LIB="-lssl" # myserver
        HAVE_SSL="yes"
    fi
    AC_SUBST(HAVE_SSL)
    AC_SUBST(OPENSSL_LIB) # myserver
    



dnl Looking for zlib
AC_CHECK_LIB(z, uncompress, have_libz=yes)
if test x$have_libz != xyes; then
    AC_MSG_WARN([
*** Cannot find Zlib (http://www.gzip.org/zlib/)
*** gzip file transfer will not be enabled
])
    AC_DEFINE(DO_NOT_USE_GZIP, 1, [Zlib compression, define to 1 to disable])
    ZLIB_LIB=""
else
    ZLIB_LIB="-lz"


    dnl Be sure that it is a good vr
    AC_CHECK_LIB(z, compressBound, have_libz=yes)
    if test x$have_libz != xyes; then
        AC_MSG_WARN([
*** Zlib is too old (http://www.gzip.org/zlib/)
*** compressBound checking will not be enabled
])
    else
        AC_DEFINE(GZIP_CHECK_BOUNDS, 1, [Memory checking for Zlib, not defined in older vrs])
    fi
fi
AC_SUBST(ZLIB_LIB)

dnl Looking for libpng
AM_PATH_LIBPNG(1.2.5, have_png=yes)
if test x$have_png != xyes; then
    AC_MSG_WARN([
*** Cannot find libPNG
*** counter MSCGI example will not be built
])
    MAKE_COUNTER=no
else
    CFLAGS="$CFLAGS $LIBPNG_CFLAGS"
    CXXFLAGS="$CXXFLAGS $LIBPNG_CFLAGS"
    MAKE_COUNTER=yes
fi


dnl Looking for FLTK
AM_PATH_FLTK(1.1.0, have_fltk=yes)
if test x$have_fltk != xyes; then
    AC_MSG_WARN([
*** Cannot find FLTK (www.fltk.org)
*** control program will not be built
])
    MAKE_CONTROL=no
else
    MAKE_CONTROL=yes
fi

dnl Check for IPv6
AC_MSG_CHECKING([for IPv6])
AC_TRY_RUN([ /* AF_INET6 available check */
#include <sys/types.h>
#include <sys/socket.h>
main()
{
 if (socket(AF_INET6, SOCK_STREAM, 0) < 0)
   exit(1);
 else
   exit(0);
}
],
[ AC_MSG_RESULT(yes)
  AC_DEFINE(HAVE_IPV6, 1, [Enable IPv6 support])
	 ],
[ AC_MSG_RESULT(no)
  AC_DEFINE(HAVE_IPV6, 0, [Enable IPv6 support])
],
[ AC_MSG_RESULT(no)
  AC_DEFINE(HAVE_IPV6, 0, [Enable IPv6 support])
]
)

AM_CONDITIONAL(BUILD_MSCGI, test "$MAKE_MSCGI" = "yes")
AM_CONDITIONAL(BUILD_COUNTER, test "$MAKE_COUNTER" = "yes")
AM_CONDITIONAL(BUILD_CONTROL, test "$MAKE_CONTROL" = "yes")

dnl AC_CONFIG_SUBDIRS()
AC_CONFIG_FILES(Makefile \
  binaries/Makefile \
  binaries/certificates/Makefile \
  binaries/external/Makefile \
  binaries/languages/Makefile \
  binaries/languages/configure/Makefile \
  binaries/web/Makefile \
  binaries/web/downloads/Makefile \
  binaries/web/cgi-bin/Makefile \
  binaries/web/cgi-src/Makefile \
  binaries/web/cgi-src/post/Makefile \
  binaries/web/cgi-src/counter/Makefile \
  binaries/web/cgi-src/math_sum/Makefile \
  binaries/logs/Makefile \
  binaries/system/Makefile \
  binaries/system/errors/Makefile \
  binaries/system/icons/Makefile \
  binaries/system/icons/codes/Makefile \
  control/Makefile \
  documentation/Makefile\
  documentation/english/Makefile \
  documentation/english/images/Makefile \
  documentation/english/style/Makefile \
  documentation/english/texts/Makefile \
  source/Makefile \
  cgi-lib/Makefile)

AC_OUTPUT
