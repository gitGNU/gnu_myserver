@c -*-texinfo-*-

@section Overview of the log management features
The MyServer's log management system was designed to support logging
over different targets. At the moment, these targets are made out of
files, sockets and, of course, consoles. Each target, must be referred
through its @b{location string}. In addition, it is possible to provide
a list of filters (e.g. the Gzip filter) to improve the logging
capabilities.

@section Use of the log manager
This section will introduce you to the use of the log management
features.

@subsection Location strings
A location string must be provided in the form
@code{protocol://resource}, where @code{protocol} can ben choosen
between :
@enumerate
@item @code{console}
@item @code{file}
@item @code{socket}
@end enumerate
while @code{resource} must be a valid filename or URL according to its
@code{protocol}. The @code{console} protocol, can take as its
@code{resource} argument, either @code{stdout} or @code{stderr}. 

@subsubsection Location string examples
@enumerate
@item Send log messages to a host whose ip address is 192.168.1.18, on
port 12345 :
@example
socket://192.168.1.18:12345
@end example
@item Send log messages to the file /var/log/myserver/MyServerHTTP.log :
@example
file:///var/log/myserver/MyServerHTTP.log
@end example
Note the extra '/' needed to refer an absolute path.
@item Send log messages to the standard error
@example
console://stderr
@end example
@end enumerate

@subsection Setting the MyServer's main log
You can set the MyServer's main log location through the switch
@example
--loglocation=protocol://resource
@end example
where the @code{--loglocation} argument is a valid location string.

@subsection Setting the logging resources for virtual hosts
Each virtual host needs two main log targets, one for the access
messages and the other one for the error messages, whose entries in the
configuration file, are respectively @code{ACCESSLOG} and
@code{WARNINGLOG}. Each of these  targets, can in turn write its
messages over different streams. To tell MyServer about all that, you
can edit the @file{virtualhosts.xml} file, and apply the informations
found in this section, to each @code{VHOST} entry of that file. As we
can see in the following example, the @code{ACCESSLOG} root entry for
the accesses log configuration, contains some @code{STREAMS}, and each
@code{STREAM} is made out of a @code{LOCATION}, a @code{CYCLE} and some
@code{FILTERS}.
@example
<ACCESSLOG type="combined">
  <STREAMS>
    <STREAM>
      <LOCATION>file://logs/MyServerHTTP.log</LOCATION>
      <CYCLE>1048576</CYCLE>
      <FILTERS>
         <FILTER>gzip</FILTER>
      </FILTERS>
    </STREAM>
    <STREAM>
      <LOCATION>console://stderr</LOCATION>
    </STREAM>
  </STREAMS>
</ACCESSLOG>
@end example
Above we have two streams attached to the @code{ACCESSLOG} entry. The
first one, is a file. This file will grow up to 1048576 bytes, over that
limit it will be cycled. Also, this target will take advantage of the
gzip compression, since it will write to the file through the gzip
filter. The second one is the standard error stream over the console.
The next example, shows instead the @code{WARNINGLOG} entry. In that
example, we still have two streams where warning messages will be
sent. The first one is a socket, while the second one is a file that
will grow with no limit over its size. No filters will be applied to
that stream.
@example
<WARNINGLOG>
  <STREAMS>
    <STREAM>
      <LOCATION>socket://192.168.1.13:8080</LOCATION>
    </STREAM>
    <STREAM>
      <LOCATION>file://MyServerHTTP.err</LOCATION>
    </STREAM>
  </STREAMS>
</WARNINGLOG>
@end example
It is important to notice that no duplicate location strings are
admitted. If any, only the first one will be added.
