@c -*-texinfo-*-
In theory, virtual hosts allow users to lodge an infinite number of
sites on a single machine. For example http://mypc.net is different
from http://sub.mypc.net. To define virtual hosts in myServer open the
file virtualhosts.xml in a text editor (such as notepad in Windows or
GNU Emacs in GNU/Linux). A sample virtual hosts configuration file
looks like:

@example
<VHOSTS>
  <VHOST>
    <NAME>Every connection</NAME>
    <PORT>80</PORT>
    <IP>127.0.0.1</IP>
    <PROTOCOL>HTTP</PROTOCOL>
    <DOCROOT>web</DOCROOT>
    <SYSFOLDER>system</SYSFOLDER>
    <HOST>www.mysite.com</HOST>
    <ACCESSLOG>logs/myServer.log</ACCESSLOG>
    <WARNINGLOG>logs/myServer.err</WARNINGLOG>
    <ALLOW_CGI>NO</ALLOW_CGI>
  </VHOST>
</VHOSTS>
@end example

@itemize
@item <NAME>
it gives the server administrator an idea of what the virtual host
is such as internal Ethernet, external ethernet or every connection.
@item <PORT>
it is the port used for accepting connections.
@item <IP>
it is optional. It is the IP address for the interface your
virtual host will be working on. The optional useRegex="YES" means the
address would act as a regular expression, not only a fixed
value. This is more useful for networks with dynamic IP addressing.
@item <PROTOCOL>
it is the protocol to be used by the host.
@item <DOCROOT>
it is the directory where the files are found.
@item <SYSFOLDER>
it is the system directory.
@item <HOST>
it is your virtual host's name. The optional useRegex="YES"
means the address would act as a regular expression, not only a fixed
value.
@item <ACCESSLOG>
it is the access log used by the virtual host
@item <WARNINGLOG>
it is the errors log file used by the virtual host.
@item <ALLOW_CGI>
This option would deny the access to CGI in this
virtual host. This line can exist in myserver.xml too, as a global
configuration, but if it is included in virtualhosts.xml, this is the
one that will be considered. @code{ALLOW_CGI} can also appear as
@code{ALLOW_FASTCGI}, @code{ALLOW_ISAPI}, @code{ALLOW_MSCGI},
@code{ALLOW_WINCGI}, @code{ALLOW_SEND_LINK},
@code{ALLOW_EXTERNAL_COMMANDS}, @code{ALLOW_SEND_FILE}, each of them
denying/allowing the proper HTTP data handler to be used.
@end itemize

Log files can have extra options:
@code{<ACCESSLOG type="combined">logs/myServerHTTP.log</ACCESSLOG>}
With this option, the logs will have two extra fields: HTTP Referrer
and HTTP User Agent.
Using cycle="yes" you will enable log cycler on the log file. When a
log file with cycling enabled reaches the max size for log files it
will write its content to a new file and recreate the original
file. By default cycled log files uses the gzip compression to save
space, if you don't want to use gzip specify cycle_gzip="no".
Here is an example of a FTP virtual host:

@example
<VHOSTS>
  <VHOST>
    <NAME>Ftp connection</NAME>
    <PORT>21</PORT>
    <IP>127.0.0.1</IP>
    <PROTOCOL>FTP</PROTOCOL>
    <DOCROOT>web</DOCROOT>
    <SYSFOLDER>system</SYSFOLDER>
    <HOST>ftp.downloads.com</HOST>
    <ACCESSLOG>logs/myServer.log</ACCESSLOG>
    <WARNINGLOG>logs/myServer.err</WARNINGLOG>
  </VHOST>
</VHOSTS>
@end example

Tags semantics are identical with first example.
Although FTP is used for public file sharing, restrictions may be
imposed using security file.

MyServer gives you the option to enable the HTTP TRACE command for
each virtual host. All you need to do is edit the security.xml file of
the root of your virtual host (not a subdirectory in it! if the file
doesn't exist, you may create a new one, in the format described in
the Security section of this documentation), and add the parameter

@example
<HTTP TRACE="ON" />
@end example

Once you do that, you enable HTTP TRACE command. By default, it's
disabled (so, simply delete the line, if you want to disable it)
