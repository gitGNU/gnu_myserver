@c -*-texinfo-*-
Under POSIX it is possible to change the MyServer process user identifier
and group identifier after it has bound the necessary ports (only the
root user can bind ports < 1024).

To specify a different process user id (PID), you must specify it in
the @file{myserver.xml} file as:

@example
<PROCESS_USER_ID>PID</PROCESS_USER_ID>
@end example

Differently, to change the process group id (GID), the configuration
line to use is:

@example
<PROCESS_GROUP_ID>GID</PROCESS_GROUP_ID>
@end example

When one of these features is used, MyServer will not use the
auto-reboot because it will not be possible to get back old
permissions.

@section CGI processes.
It is possible to run CGI processes using a different uid/gid.  It can
be done defining the ``cgi.uid'' and ``cgi.gid'' values in a
configuration file.  It can be specified at any configuration level.

These directives can be used in a security file to force the execution
of the new process with both uid and gid to 1000.
@example
<DEFINE name="cgi.uid" value="1000" />
<DEFINE name="cgi.gid" value="1000" />
@end example

@section Fork Server
In a POSIX environment the @code{fork} syscall is used to execute new
processes.  It clones the caller process keeping any open file or
connection in the child process too.  To avoid this problem a fork
server is present in MyServer.
The communication between the MyServer process and the
fork server is done trought a socket.  When MyServer wants to execute
a new process two connections are opened to the fork server, for
the stdin and stdout streams, and the fork server will fork itself and
execute the process using these connections as its I/O streams.

It is not configurable in any configuration file as the MyServer
process is forked to create it before any file or connection is
active.

It is enabled passing the @code{-f} switch to the myserver process.

If the MyServer main process is configured to change its uid/gid after
its initialization, it is the only way to spawn new processes with
uid/gid different than the MyServer process.

@section FastCGI/SCGI servers
By default, FastCGI and SCGI servers are lazily initialized by
MyServer on the first request to a resource that is handled trought
these protocols.  In this case MyServer will initialize it using a
random TCP port.
There may be cases where a different configuration is needed and it is
done using the @code{PROCESS_SERVER} directive inside the
@file{myserver.xml} file.

A @code{PROCESS_SERVER} entry makes it possible to access a specific
FastCGI/SCGI configuration inside MIME types by its name.

@example
<PROCESS_SERVER>
        <NAME>/opt/bin/fastcgi_server</NAME>
        <DOMAIN>fastcgi</DOMAIN>
        <HOST>localhost</HOST>
        <PORT>2010</PORT>
        <LOCAL>yes</LOCAL>
</PROCESS_SERVER>
@end example

In the previous example the FastCGI server
@code{/opt/bin/fastcgi_server} is created.  The @code{domain} must be
"fastcgi" or "scgi", depending on the specific protocol to use.
@code{LOCAL} specifies if the server is handled by myserver or it is
already running; in the former case, myserver will simply access and
use it.
If the server is not local then the @code{name} is a simple label that
can be used by a MIME type trought @code{param} to access it.


The following code, declare an already running FastCGI server and
registers it on the @code{fcgi} extension:

@example
<!-- Inside myserver.xml.  -->
<PROCESS_SERVER>
        <NAME>a_remote_server</NAME>
        <DOMAIN>fastcgi</DOMAIN>
        <HOST>foo</HOST>
        <PORT>2010</PORT>
        <LOCAL>NO</LOCAL>
</PROCESS_SERVER>

<!-- Inside MIMEtypes.xml.  -->
<MIME mime="text/html" handler="RUNFASTCGI" param="a_remote_server">
      <EXTENSION value="fcgi"/>
</MIME>
@end example
