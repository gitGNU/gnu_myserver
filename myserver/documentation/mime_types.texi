@c -*-texinfo-*-
You can modify the MIME types used by MyServer by modifying the file
@file{MIMEtypes.xml}. The following is an example of this file: 

@example
<?xml version ="1.0"?>
<MIME mime="text/html" handler="SEND" param="">
<EXTENSION value="html"/>
</MIME>

<MIME mime="text/html" handler="RUNCGI" param="/usr/bin/perl" selfExecuted="NO">
<FILTER value="gzip"/>
<EXTENSION value="pl"/>
<DEFINE name="http.error.file.404" value="404.html"/>
</MIME>
@end example

@itemize
Each block describes a different MIME type.

@item mime
the MIME attribute specifies the MIME name.

@item extension
the MIME type will be used by any file with this extension.  More
@code{extension} items can be specified for the same MIME type.

@item filter
this directive registers a filter to use on the MIME type.  It depends
from the protocol how it will be handled, a protocol may ignore this
directive.  For example HTTP will use a modifier filter only if it is
accepted by the client.

@item handler
specifies how the server will manage this file.  It is protocol
specific, for example, FTP doesn't support it.

@item param
specifies additional params for the handler.

@item selfExecuted
where it is supported, lanuch the accessed resource as a process or a
server.
For example, there is need to use selfExecuted on the CGI protocol if
the accessed resource can be used as a process.  Differently if it is
not specified, the resource mapped by the URI will be used as an
additional argument to @code{param}.
@end itemize

@code{<FILTER>} defines a filter for the MIME type.  The data will
pass through the filter before being sent to the user.  
In the example above, the data would be sent gzipped to the user.
It is possible to specify multiple filters for the same MIME type,
they will be applied in the specified order.

@code{<DEFINE>} It defines a new value for a variable, take a look
here @xref{Security files} for more details on the @code{<DEFINE>}
element.

The same MIME type can have several extensions, you will need to
specify a different @code{<EXTENSION>} element for each extension.

These are valid HTTP handlers:
@enumerate
@item SEND
Send the file statically as is.  This command is used for files
extensions such as .html and .jpg that don't need any external
intervention from the web server.
@item CGI
Run the CGI script indicated in the path.  It is used for file
extensions such as .php and .pl that need to be processed before
sending any data to the client.
@item FASTCGI
Run the Fastcgi script.  This type will need a fastcgi parser
downloaded (see the PHP page).  It is also used for file extensions
such as .php and .pl.
@item SCGI
Handle a specified mime type with this SCGI server.
@item MSCGI
Run the MSCGI script. This library is only available for MyServer. It
is used to build fast and efficient CGIs that needs to access MyServer
internal data.
@item ISAPI
Run the ISAPI script.  
@end enumerate

It is possible to match the file name against a regular expression
instead of specifying only its extension.

It is done using the @code{PATH} directive in the following way:

@example
<?xml version ="1.0"?>
<MIME mime="text/html" handler="SEND" param="">
<PATH regex="/foo/bar/.*" />
</MIME>
@end example

The @code{PATH} regular expressions are checked before the file
extension, in the order they are specified in the configuration file.
