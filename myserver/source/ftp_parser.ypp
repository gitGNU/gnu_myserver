%{
#include "../include/ftp.h"
#include "../include/ftp_parser.h"
#include "../include/ftp_lexer.h"
#include "../include/clients_thread.h"
#include <assert.h>
%}

%pure-parser
%defines
%lex-param { yyscan_t yyscanner }
%parse-param { Ftp *pContext }
%locations

%union {
	int		m_nInt;
	char		m_nChar;
	char		m_szStr[PARSER_STR_LEN];
	FtpHost 	m_host;
}

%{
#define yyscanner pContext->GetScanner()
%}

/* general tokens */
%token <m_nInt> NUMBER_FTP_ARG
%token <m_szStr> STRING_FTP_ARG
%token <m_nChar> CHAR_FTP_ARG
%type <m_host> host_port
%type <m_host> host_number
%type <m_host> port_number
%token CRLF_FTP_SEP
%token SPACE_FTP_SEP
%token PUNCT_FTP_SEP

/* Login */
%token USER_FTP_COMMAND
%token PASS_FTP_COMMAND

/* Logout */
%token QUIT_FTP_COMMAND

/* Transfer parameters */
%token PORT_FTP_COMMAND
%token PASV_FTP_COMMAND
%token MODE_FTP_COMMAND
%token TYPE_FTP_COMMAND
%token STRU_FTP_COMMAND

/* File action commands */
%token REST_FTP_COMMAND
%token RETR_FTP_COMMAND
%token LIST_FTP_COMMAND
%token NLST_FTP_COMMAND
%token ABOR_FTP_COMMAND
%token CWD_FTP_COMMAND
%token CDUP_FTP_COMMAND
%token PWD_FTP_COMMAND

%token STOR_FTP_COMMAND
%token DELE_FTP_COMMAND
%token APPE_FTP_COMMAND
%token MKD_FTP_COMMAND
%token RMD_FTP_COMMAND

/* Informational commands */
%token HELP_FTP_COMMAND
%token SYST_FTP_COMMAND
%token STAT_FTP_COMMAND

/* Miscellaneous commands*/
%token NOOP_FTP_COMMAND

/* SITE commands */
%token SITE_FTP_COMMAND
%token CHMOD_FTP_COMMAND
%token UTIME_FTP_COMMAND

%%
cmd_list	:/* empty */
		| cmd_list cmd
		{
			pContext->ComputeParseLength(@$);
		}
		;
	/* Minimal FTP implementation */
cmd		: USER_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
			pContext->User($3);
		}
		| PASS_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
			pContext->Password($3);
		}
		| PORT_FTP_COMMAND SPACE_FTP_SEP host_port CRLF_FTP_SEP
		{
		  pContext->Port($3);
		}
		| PASV_FTP_COMMAND CRLF_FTP_SEP
		{
		  pContext->Pasv();
		}
		| MODE_FTP_COMMAND SPACE_FTP_SEP CHAR_FTP_ARG CRLF_FTP_SEP
		{
		  pContext->Mode($3);
		}
		| TYPE_FTP_COMMAND SPACE_FTP_SEP CHAR_FTP_ARG CRLF_FTP_SEP
		{
		  pContext->Type($3);
		}
		| TYPE_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
		  pContext->Type($3);
		}
		| STRU_FTP_COMMAND SPACE_FTP_SEP CHAR_FTP_ARG CRLF_FTP_SEP
		{
		  pContext->Stru($3);
		}
		| REST_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
		  pContext->Rest($3);
		}
		| RETR_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
		  pContext->Retr($3);
		}
		| ABOR_FTP_COMMAND CRLF_FTP_SEP
		{
			pContext->Abor();
		}
		| LIST_FTP_COMMAND CRLF_FTP_SEP
		{
		  pContext->List();
		}
		| LIST_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
		  pContext->List($3);
		}
		| NLST_FTP_COMMAND CRLF_FTP_SEP
		{
		  pContext->Nlst();
		}
		| NLST_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
		  pContext->Nlst($3);
		}
		| CWD_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
			pContext->Cwd($3);
		}
		| CDUP_FTP_COMMAND CRLF_FTP_SEP
		{
			pContext->Cwd("../");
		}
		| PWD_FTP_COMMAND CRLF_FTP_SEP
		{
			pContext->Pwd();
		}
		| HELP_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
			pContext->Help($3);
		}
		| HELP_FTP_COMMAND CRLF_FTP_SEP
		{
			pContext->Help();
		}
		| SYST_FTP_COMMAND CRLF_FTP_SEP
		{
			pContext->Syst();
		}
		| STAT_FTP_COMMAND CRLF_FTP_SEP
		{
			pContext->Stat();
		}
		| QUIT_FTP_COMMAND CRLF_FTP_SEP
		{
			pContext->Quit();
		}
		| NOOP_FTP_COMMAND CRLF_FTP_SEP
		{
			pContext->Noop();
		}
		| STRING_FTP_ARG SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
			pContext->ftp_reply(502);//any new commands
		}
		| STRING_FTP_ARG CRLF_FTP_SEP
		{
			pContext->ftp_reply(502);//any new commands
		}
		| CRLF_FTP_SEP
		{
			// ignore empty lines
		}
		| STOR_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
		  pContext->Stor($3);
		}
		| DELE_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
		  pContext->Dele($3);
		}
		| APPE_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
		  pContext->Appe($3);
		}
		| MKD_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
		  pContext->Mkd($3);
		}
		| RMD_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
		  pContext->Rmd($3);
		}
		| SITE_FTP_COMMAND SPACE_FTP_SEP cmd
		{
		}
		| CHMOD_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
			//pContext->Chmod($3, $5);
			pContext->ftp_reply(502);//any site commands
		}
		| UTIME_FTP_COMMAND SPACE_FTP_SEP STRING_FTP_ARG SPACE_FTP_SEP STRING_FTP_ARG CRLF_FTP_SEP
		{
			//pContext->Utime($3, $5);
			pContext->ftp_reply(502);//any site commands
		}
		;
	/* ftp command arguments */
host_port	: host_number ',' port_number
		{
		  $$.h1 = $1.h1;
		  $$.h2 = $1.h2;
		  $$.h3 = $1.h3;
		  $$.h4 = $1.h4;
		  $$.p1 = $3.p1;
		  $$.p2 = $3.p2;
		}
		;
host_number	: NUMBER_FTP_ARG ',' NUMBER_FTP_ARG ',' NUMBER_FTP_ARG ',' NUMBER_FTP_ARG
		{
		  $$.h1 = $1;
		  $$.h2 = $3;
		  $$.h3 = $5;
		  $$.h4 = $7;
		}
		;
port_number	: NUMBER_FTP_ARG ',' NUMBER_FTP_ARG
		{
		  $$.p1 = $1;
		  $$.p2 = $3;
		}
		;
%%

int Ftp::ParseControlConnection()
{
	if ( td.buffer == NULL || td.buffer->getBuffer() == NULL )
		return ClientsThread::DELETE_CONNECTION;
	FtpUserData *pFtpUserData = static_cast<FtpUserData *>(td.pConnection->protocolBuffer);
	if ( pFtpUserData == NULL )
		return ClientsThread::DELETE_CONNECTION;

	// awaiting commands reply
	if ( pFtpUserData->m_nFtpState <= FtpUserData::NO_CONTROL_CONNECTION )
	{
		ftp_reply(220);
		pFtpUserData->m_nFtpState = FtpUserData::CONTROL_CONNECTION_UP;
	}

	MemBuf out;
	EscapeTelnet(*td.buffer, out);
	if ( !m_bEnablePipelining )
	{
		MemBuf tmpBuff(out);
		RemovePipelinedCmds(tmpBuff, out);
	}
	char *pBuffToParse = out.getBuffer();

	if ( pBuffToParse == NULL || td.buffersize <= td.m_nParseLength )// nothing to parse ...
		return ClientsThread::KEEP_CONNECTION;
	else
		pBuffToParse += td.m_nParseLength;

	yylex_init(&m_scanner);
	yy_buffer_state *bufState = yy_scan_string (pBuffToParse, m_scanner);
	int nParserRet = yyparse(this);
	yy_delete_buffer(bufState, m_scanner);
	yylex_destroy(m_scanner);
	switch ( nParserRet )
	{
		case 0:
			if ( pFtpUserData->m_nFtpState == FtpUserData::NO_CONTROL_CONNECTION )
				return ClientsThread::DELETE_CONNECTION;
			else
				return ClientsThread::KEEP_CONNECTION;
		case 1:
			// parsing failed because of invalid input!
			return ClientsThread::DELETE_CONNECTION;
		case 2:
			// memory exhaustion!
			return ClientsThread::DELETE_CONNECTION;
	}//TODO: handle INCOMPLETE_REQUEST
	return ClientsThread::DELETE_CONNECTION;
}

u_long Ftp::ComputeParseLength(const YYLTYPE &location)
{
	if ( td.buffer == NULL )
		return 1;
	int nBuffLine = 1, nBuffCol = 0;
	char *pszBuff = td.buffer->getBuffer();
	for ( u_long i = 0; i < td.buffersize; i++ )
	{
		if ( pszBuff[i] == '\n' )
		{
			nBuffLine++;
			nBuffCol = 0;
		}
		else
			nBuffCol++;
		if ( nBuffLine == location.last_line && nBuffCol == location.last_column )
		{
			td.m_nParseLength = i;
			return 0;
		}
	}
	return 1;//error
}

///////////////////////////////////////////////////////////
// global fncs

void yyerror(YYLTYPE *pLoc, Ftp *pContext, const char *msg)
{
	if ( pContext == NULL )
		return;
	pContext->PrintError(msg);
}
